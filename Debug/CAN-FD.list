
CAN-FD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f3c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800711c  0800711c  0000811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007604  08007604  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007604  08007604  00008604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800760c  0800760c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800760c  0800760c  0000860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007610  08007610  00008610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007614  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  2000005c  08007670  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08007670  00009490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffef  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d5  00000000  00000000  0001907b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0001b150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000999  00000000  00000000  0001bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dae5  00000000  00000000  0001c769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e945  00000000  00000000  0003a24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc16b  00000000  00000000  00048b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104cfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd4  00000000  00000000  00104d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00108a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007104 	.word	0x08007104

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08007104 	.word	0x08007104

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
 8000620:	f001 f837 	bl	8001692 <HAL_Init>
 8000624:	f000 f81c 	bl	8000660 <SystemClock_Config>
 8000628:	f000 f950 	bl	80008cc <MX_GPIO_Init>
 800062c:	f000 f858 	bl	80006e0 <MX_FDCAN1_Init>
 8000630:	f000 f900 	bl	8000834 <MX_USART2_UART_Init>
 8000634:	2201      	movs	r2, #1
 8000636:	4906      	ldr	r1, [pc, #24]	@ (8000650 <main+0x34>)
 8000638:	4806      	ldr	r0, [pc, #24]	@ (8000654 <main+0x38>)
 800063a:	f003 fb83 	bl	8003d44 <HAL_UART_Receive_IT>
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <main+0x3c>)
 8000640:	f002 f856 	bl	80026f0 <HAL_FDCAN_GetState>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <main+0x40>)
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0x30>
 8000650:	20000174 	.word	0x20000174
 8000654:	200000dc 	.word	0x200000dc
 8000658:	20000078 	.word	0x20000078
 800065c:	200001b4 	.word	0x200001b4

08000660 <SystemClock_Config>:
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2238      	movs	r2, #56	@ 0x38
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 fd84 	bl	800617c <memset>
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000686:	f002 faad 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
 8000694:	2340      	movs	r3, #64	@ 0x40
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000698:	2300      	movs	r3, #0
 800069a:	637b      	str	r3, [r7, #52]	@ 0x34
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fb53 	bl	8002d4c <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x50>
 80006ac:	f000 fe50 	bl	8001350 <Error_Handler>
 80006b0:	230f      	movs	r3, #15
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fe51 	bl	8003370 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x78>
 80006d4:	f000 fe3c 	bl	8001350 <Error_Handler>
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	@ 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_FDCAN1_Init>:
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4b4f      	ldr	r3, [pc, #316]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 80006e8:	4a4f      	ldr	r2, [pc, #316]	@ (8000828 <MX_FDCAN1_Init+0x148>)
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	4b4c      	ldr	r3, [pc, #304]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 80006f4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	4b48      	ldr	r3, [pc, #288]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000702:	2200      	movs	r2, #0
 8000704:	741a      	strb	r2, [r3, #16]
 8000706:	4b47      	ldr	r3, [pc, #284]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000708:	2200      	movs	r2, #0
 800070a:	745a      	strb	r2, [r3, #17]
 800070c:	4b45      	ldr	r3, [pc, #276]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 800070e:	2200      	movs	r2, #0
 8000710:	749a      	strb	r2, [r3, #18]
 8000712:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000714:	2201      	movs	r2, #1
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4b42      	ldr	r3, [pc, #264]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 800071a:	2205      	movs	r2, #5
 800071c:	619a      	str	r2, [r3, #24]
 800071e:	4b41      	ldr	r3, [pc, #260]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000720:	2218      	movs	r2, #24
 8000722:	61da      	str	r2, [r3, #28]
 8000724:	4b3f      	ldr	r3, [pc, #252]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000726:	2206      	movs	r2, #6
 8000728:	621a      	str	r2, [r3, #32]
 800072a:	4b3e      	ldr	r3, [pc, #248]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 800072c:	2201      	movs	r2, #1
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000730:	4b3c      	ldr	r3, [pc, #240]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000732:	2203      	movs	r2, #3
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
 8000736:	4b3b      	ldr	r3, [pc, #236]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000738:	2203      	movs	r2, #3
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800073c:	4b39      	ldr	r3, [pc, #228]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 800073e:	2202      	movs	r2, #2
 8000740:	631a      	str	r2, [r3, #48]	@ 0x30
 8000742:	4b38      	ldr	r3, [pc, #224]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000744:	2201      	movs	r2, #1
 8000746:	635a      	str	r2, [r3, #52]	@ 0x34
 8000748:	4b36      	ldr	r3, [pc, #216]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 800074a:	2200      	movs	r2, #0
 800074c:	639a      	str	r2, [r3, #56]	@ 0x38
 800074e:	4b35      	ldr	r3, [pc, #212]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000750:	2200      	movs	r2, #0
 8000752:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000754:	4833      	ldr	r0, [pc, #204]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 8000756:	f001 f9dd 	bl	8001b14 <HAL_FDCAN_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_FDCAN1_Init+0x84>
 8000760:	f000 fdf6 	bl	8001350 <Error_Handler>
 8000764:	4b31      	ldr	r3, [pc, #196]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 8000766:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 800077a:	220f      	movs	r2, #15
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	4b29      	ldr	r3, [pc, #164]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 8000786:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 800078e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000792:	619a      	str	r2, [r3, #24]
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
 800079a:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_FDCAN1_Init+0x14c>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
 80007a0:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <MX_FDCAN1_Init+0x150>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <MX_FDCAN1_Init+0x150>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <MX_FDCAN1_Init+0x150>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_FDCAN1_Init+0x150>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_FDCAN1_Init+0x150>)
 80007ba:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_FDCAN1_Init+0x150>)
 80007c2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	4919      	ldr	r1, [pc, #100]	@ (8000830 <MX_FDCAN1_Init+0x150>)
 80007ca:	4816      	ldr	r0, [pc, #88]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 80007cc:	f001 fafc 	bl	8001dc8 <HAL_FDCAN_ConfigFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_FDCAN1_Init+0xfa>
 80007d6:	f000 fdbb 	bl	8001350 <Error_Handler>
 80007da:	2300      	movs	r3, #0
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2202      	movs	r2, #2
 80007e2:	2100      	movs	r1, #0
 80007e4:	480f      	ldr	r0, [pc, #60]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 80007e6:	f001 fb49 	bl	8001e7c <HAL_FDCAN_ConfigGlobalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_FDCAN1_Init+0x114>
 80007f0:	f000 fdae 	bl	8001350 <Error_Handler>
 80007f4:	480b      	ldr	r0, [pc, #44]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 80007f6:	f001 fb72 	bl	8001ede <HAL_FDCAN_Start>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_FDCAN1_Init+0x124>
 8000800:	f000 fda6 	bl	8001350 <Error_Handler>
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_FDCAN1_Init+0x144>)
 800080a:	f001 fcef 	bl	80021ec <HAL_FDCAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_FDCAN1_Init+0x138>
 8000814:	f000 fd9c 	bl	8001350 <Error_Handler>
 8000818:	2015      	movs	r0, #21
 800081a:	f001 f8a0 	bl	800195e <HAL_NVIC_EnableIRQ>
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000078 	.word	0x20000078
 8000828:	40006400 	.word	0x40006400
 800082c:	20000190 	.word	0x20000190
 8000830:	20000178 	.word	0x20000178

08000834 <MX_USART2_UART_Init>:
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
 8000838:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 800083a:	4a23      	ldr	r2, [pc, #140]	@ (80008c8 <MX_USART2_UART_Init+0x94>)
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000840:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
 8000876:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
 800087c:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 800087e:	f003 f983 	bl	8003b88 <HAL_UART_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART2_UART_Init+0x58>
 8000888:	f000 fd62 	bl	8001350 <Error_Handler>
 800088c:	2100      	movs	r1, #0
 800088e:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 8000890:	f005 f9cb 	bl	8005c2a <HAL_UARTEx_SetTxFifoThreshold>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x6a>
 800089a:	f000 fd59 	bl	8001350 <Error_Handler>
 800089e:	2100      	movs	r1, #0
 80008a0:	4808      	ldr	r0, [pc, #32]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 80008a2:	f005 fa00 	bl	8005ca6 <HAL_UARTEx_SetRxFifoThreshold>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x7c>
 80008ac:	f000 fd50 	bl	8001350 <Error_Handler>
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_USART2_UART_Init+0x90>)
 80008b2:	f005 f97f 	bl	8005bb4 <HAL_UARTEx_EnableFifoMode>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART2_UART_Init+0x8c>
 80008bc:	f000 fd48 	bl	8001350 <Error_Handler>
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000dc 	.word	0x200000dc
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <MX_GPIO_Init+0xac>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a24      	ldr	r2, [pc, #144]	@ (8000978 <MX_GPIO_Init+0xac>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_GPIO_Init+0xac>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_GPIO_Init+0xac>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000978 <MX_GPIO_Init+0xac>)
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xac>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_GPIO_Init+0xac>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <MX_GPIO_Init+0xac>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_GPIO_Init+0xac>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	2120      	movs	r1, #32
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f002 f93f 	bl	8002bb4 <HAL_GPIO_WritePin>
 8000936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4619      	mov	r1, r3
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_GPIO_Init+0xb0>)
 800094c:	f001 ffb0 	bl	80028b0 <HAL_GPIO_Init>
 8000950:	2320      	movs	r3, #32
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	2301      	movs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096a:	f001 ffa1 	bl	80028b0 <HAL_GPIO_Init>
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	48000800 	.word	0x48000800

08000980 <UART_Send_Response>:
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fc53 	bl	8000234 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <UART_Send_Response+0x28>)
 800099a:	f003 f945 	bl	8003c28 <HAL_UART_Transmit>
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000dc 	.word	0x200000dc

080009ac <HAL_UART_RxCpltCallback>:
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a70 <HAL_UART_RxCpltCallback+0xc4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d155      	bne.n	8000a6a <HAL_UART_RxCpltCallback+0xbe>
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000a78 <HAL_UART_RxCpltCallback+0xcc>)
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	3201      	adds	r2, #1
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fab6 	bl	8005f3c <realloc>
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d107      	bne.n	80009e8 <HAL_UART_RxCpltCallback+0x3c>
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	2210      	movs	r2, #16
 80009de:	4927      	ldr	r1, [pc, #156]	@ (8000a7c <HAL_UART_RxCpltCallback+0xd0>)
 80009e0:	4827      	ldr	r0, [pc, #156]	@ (8000a80 <HAL_UART_RxCpltCallback+0xd4>)
 80009e2:	f003 f921 	bl	8003c28 <HAL_UART_Transmit>
 80009e6:	e040      	b.n	8000a6a <HAL_UART_RxCpltCallback+0xbe>
 80009e8:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <HAL_UART_RxCpltCallback+0xcc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	1c59      	adds	r1, r3, #1
 80009f8:	b2c8      	uxtb	r0, r1
 80009fa:	491f      	ldr	r1, [pc, #124]	@ (8000a78 <HAL_UART_RxCpltCallback+0xcc>)
 80009fc:	7008      	strb	r0, [r1, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a20      	ldr	r2, [pc, #128]	@ (8000a84 <HAL_UART_RxCpltCallback+0xd8>)
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <HAL_UART_RxCpltCallback+0xd8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b0d      	cmp	r3, #13
 8000a0c:	d128      	bne.n	8000a60 <HAL_UART_RxCpltCallback+0xb4>
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b53      	cmp	r3, #83	@ 0x53
 8000a16:	d10c      	bne.n	8000a32 <HAL_UART_RxCpltCallback+0x86>
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f837 	bl	8000a90 <Process_Command>
 8000a22:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <HAL_UART_RxCpltCallback+0xdc>)
 8000a24:	f001 fe64 	bl	80026f0 <HAL_FDCAN_GetState>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <HAL_UART_RxCpltCallback+0xe0>)
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e00b      	b.n	8000a4a <HAL_UART_RxCpltCallback+0x9e>
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fac2 	bl	8000fc0 <send_Frame>
 8000a3c:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <HAL_UART_RxCpltCallback+0xdc>)
 8000a3e:	f001 fe57 	bl	80026f0 <HAL_FDCAN_GetState>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <HAL_UART_RxCpltCallback+0xe0>)
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 f9be 	bl	8005dd0 <free>
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <HAL_UART_RxCpltCallback+0xcc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	2201      	movs	r2, #1
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <HAL_UART_RxCpltCallback+0xd8>)
 8000a64:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <HAL_UART_RxCpltCallback+0xd4>)
 8000a66:	f003 f96d 	bl	8003d44 <HAL_UART_Receive_IT>
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	20000170 	.word	0x20000170
 8000a78:	20000175 	.word	0x20000175
 8000a7c:	0800711c 	.word	0x0800711c
 8000a80:	200000dc 	.word	0x200000dc
 8000a84:	20000174 	.word	0x20000174
 8000a88:	20000078 	.word	0x20000078
 8000a8c:	200001b4 	.word	0x200001b4

08000a90 <Process_Command>:
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	4b9f      	ldr	r3, [pc, #636]	@ (8000d18 <Process_Command+0x288>)
 8000a9a:	4aa0      	ldr	r2, [pc, #640]	@ (8000d1c <Process_Command+0x28c>)
 8000a9c:	49a0      	ldr	r1, [pc, #640]	@ (8000d20 <Process_Command+0x290>)
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f005 fb3e 	bl	8006120 <siscanf>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	f040 8240 	bne.w	8000f2c <Process_Command+0x49c>
 8000aac:	4b9a      	ldr	r3, [pc, #616]	@ (8000d18 <Process_Command+0x288>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b30      	cmp	r3, #48	@ 0x30
 8000ab2:	d10d      	bne.n	8000ad0 <Process_Command+0x40>
 8000ab4:	4b98      	ldr	r3, [pc, #608]	@ (8000d18 <Process_Command+0x288>)
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	2b78      	cmp	r3, #120	@ 0x78
 8000aba:	d003      	beq.n	8000ac4 <Process_Command+0x34>
 8000abc:	4b96      	ldr	r3, [pc, #600]	@ (8000d18 <Process_Command+0x288>)
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	2b58      	cmp	r3, #88	@ 0x58
 8000ac2:	d105      	bne.n	8000ad0 <Process_Command+0x40>
 8000ac4:	4a97      	ldr	r2, [pc, #604]	@ (8000d24 <Process_Command+0x294>)
 8000ac6:	4998      	ldr	r1, [pc, #608]	@ (8000d28 <Process_Command+0x298>)
 8000ac8:	4893      	ldr	r0, [pc, #588]	@ (8000d18 <Process_Command+0x288>)
 8000aca:	f005 fb29 	bl	8006120 <siscanf>
 8000ace:	e004      	b.n	8000ada <Process_Command+0x4a>
 8000ad0:	4a94      	ldr	r2, [pc, #592]	@ (8000d24 <Process_Command+0x294>)
 8000ad2:	4996      	ldr	r1, [pc, #600]	@ (8000d2c <Process_Command+0x29c>)
 8000ad4:	4890      	ldr	r0, [pc, #576]	@ (8000d18 <Process_Command+0x288>)
 8000ad6:	f005 fb23 	bl	8006120 <siscanf>
 8000ada:	4995      	ldr	r1, [pc, #596]	@ (8000d30 <Process_Command+0x2a0>)
 8000adc:	488f      	ldr	r0, [pc, #572]	@ (8000d1c <Process_Command+0x28c>)
 8000ade:	f7ff fb9f 	bl	8000220 <strcmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d105      	bne.n	8000af4 <Process_Command+0x64>
 8000ae8:	f7ff fdfa 	bl	80006e0 <MX_FDCAN1_Init>
 8000aec:	4891      	ldr	r0, [pc, #580]	@ (8000d34 <Process_Command+0x2a4>)
 8000aee:	f7ff ff47 	bl	8000980 <UART_Send_Response>
 8000af2:	e21e      	b.n	8000f32 <Process_Command+0x4a2>
 8000af4:	4990      	ldr	r1, [pc, #576]	@ (8000d38 <Process_Command+0x2a8>)
 8000af6:	4889      	ldr	r0, [pc, #548]	@ (8000d1c <Process_Command+0x28c>)
 8000af8:	f7ff fb92 	bl	8000220 <strcmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 8088 	bne.w	8000c14 <Process_Command+0x184>
 8000b04:	4b87      	ldr	r3, [pc, #540]	@ (8000d24 <Process_Command+0x294>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b1d      	cmp	r3, #29
 8000b0c:	d87e      	bhi.n	8000c0c <Process_Command+0x17c>
 8000b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <Process_Command+0x84>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b8d 	.word	0x08000b8d
 8000b18:	08000b95 	.word	0x08000b95
 8000b1c:	08000c0d 	.word	0x08000c0d
 8000b20:	08000b9d 	.word	0x08000b9d
 8000b24:	08000c0d 	.word	0x08000c0d
 8000b28:	08000ba5 	.word	0x08000ba5
 8000b2c:	08000c0d 	.word	0x08000c0d
 8000b30:	08000bad 	.word	0x08000bad
 8000b34:	08000c0d 	.word	0x08000c0d
 8000b38:	08000bb5 	.word	0x08000bb5
 8000b3c:	08000c0d 	.word	0x08000c0d
 8000b40:	08000bbd 	.word	0x08000bbd
 8000b44:	08000c0d 	.word	0x08000c0d
 8000b48:	08000bc5 	.word	0x08000bc5
 8000b4c:	08000c0d 	.word	0x08000c0d
 8000b50:	08000bcd 	.word	0x08000bcd
 8000b54:	08000c0d 	.word	0x08000c0d
 8000b58:	08000bd5 	.word	0x08000bd5
 8000b5c:	08000c0d 	.word	0x08000c0d
 8000b60:	08000bdd 	.word	0x08000bdd
 8000b64:	08000c0d 	.word	0x08000c0d
 8000b68:	08000be5 	.word	0x08000be5
 8000b6c:	08000c0d 	.word	0x08000c0d
 8000b70:	08000bed 	.word	0x08000bed
 8000b74:	08000c0d 	.word	0x08000c0d
 8000b78:	08000bf5 	.word	0x08000bf5
 8000b7c:	08000c0d 	.word	0x08000c0d
 8000b80:	08000bfd 	.word	0x08000bfd
 8000b84:	08000c0d 	.word	0x08000c0d
 8000b88:	08000c05 	.word	0x08000c05
 8000b8c:	4b6b      	ldr	r3, [pc, #428]	@ (8000d3c <Process_Command+0x2ac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	e1c7      	b.n	8000f24 <Process_Command+0x494>
 8000b94:	4b69      	ldr	r3, [pc, #420]	@ (8000d3c <Process_Command+0x2ac>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	e1c3      	b.n	8000f24 <Process_Command+0x494>
 8000b9c:	4b67      	ldr	r3, [pc, #412]	@ (8000d3c <Process_Command+0x2ac>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	e1bf      	b.n	8000f24 <Process_Command+0x494>
 8000ba4:	4b65      	ldr	r3, [pc, #404]	@ (8000d3c <Process_Command+0x2ac>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	e1bb      	b.n	8000f24 <Process_Command+0x494>
 8000bac:	4b63      	ldr	r3, [pc, #396]	@ (8000d3c <Process_Command+0x2ac>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	e1b7      	b.n	8000f24 <Process_Command+0x494>
 8000bb4:	4b61      	ldr	r3, [pc, #388]	@ (8000d3c <Process_Command+0x2ac>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	e1b3      	b.n	8000f24 <Process_Command+0x494>
 8000bbc:	4b5f      	ldr	r3, [pc, #380]	@ (8000d3c <Process_Command+0x2ac>)
 8000bbe:	2206      	movs	r2, #6
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	e1af      	b.n	8000f24 <Process_Command+0x494>
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d3c <Process_Command+0x2ac>)
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	e1ab      	b.n	8000f24 <Process_Command+0x494>
 8000bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d3c <Process_Command+0x2ac>)
 8000bce:	2208      	movs	r2, #8
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	e1a7      	b.n	8000f24 <Process_Command+0x494>
 8000bd4:	4b59      	ldr	r3, [pc, #356]	@ (8000d3c <Process_Command+0x2ac>)
 8000bd6:	2209      	movs	r2, #9
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	e1a3      	b.n	8000f24 <Process_Command+0x494>
 8000bdc:	4b57      	ldr	r3, [pc, #348]	@ (8000d3c <Process_Command+0x2ac>)
 8000bde:	220a      	movs	r2, #10
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	e19f      	b.n	8000f24 <Process_Command+0x494>
 8000be4:	4b55      	ldr	r3, [pc, #340]	@ (8000d3c <Process_Command+0x2ac>)
 8000be6:	220b      	movs	r2, #11
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	e19b      	b.n	8000f24 <Process_Command+0x494>
 8000bec:	4b53      	ldr	r3, [pc, #332]	@ (8000d3c <Process_Command+0x2ac>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	e197      	b.n	8000f24 <Process_Command+0x494>
 8000bf4:	4b51      	ldr	r3, [pc, #324]	@ (8000d3c <Process_Command+0x2ac>)
 8000bf6:	220d      	movs	r2, #13
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	e193      	b.n	8000f24 <Process_Command+0x494>
 8000bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8000d3c <Process_Command+0x2ac>)
 8000bfe:	220e      	movs	r2, #14
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	e18f      	b.n	8000f24 <Process_Command+0x494>
 8000c04:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <Process_Command+0x2ac>)
 8000c06:	220f      	movs	r2, #15
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	e18b      	b.n	8000f24 <Process_Command+0x494>
 8000c0c:	484c      	ldr	r0, [pc, #304]	@ (8000d40 <Process_Command+0x2b0>)
 8000c0e:	f7ff feb7 	bl	8000980 <UART_Send_Response>
 8000c12:	e18e      	b.n	8000f32 <Process_Command+0x4a2>
 8000c14:	494b      	ldr	r1, [pc, #300]	@ (8000d44 <Process_Command+0x2b4>)
 8000c16:	4841      	ldr	r0, [pc, #260]	@ (8000d1c <Process_Command+0x28c>)
 8000c18:	f7ff fb02 	bl	8000220 <strcmp>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d11d      	bne.n	8000c5e <Process_Command+0x1ce>
 8000c22:	4b40      	ldr	r3, [pc, #256]	@ (8000d24 <Process_Command+0x294>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <Process_Command+0x1a2>
 8000c2a:	4b44      	ldr	r3, [pc, #272]	@ (8000d3c <Process_Command+0x2ac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	e178      	b.n	8000f24 <Process_Command+0x494>
 8000c32:	4b3c      	ldr	r3, [pc, #240]	@ (8000d24 <Process_Command+0x294>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d104      	bne.n	8000c44 <Process_Command+0x1b4>
 8000c3a:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <Process_Command+0x2ac>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	e16f      	b.n	8000f24 <Process_Command+0x494>
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <Process_Command+0x294>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d104      	bne.n	8000c56 <Process_Command+0x1c6>
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d3c <Process_Command+0x2ac>)
 8000c4e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	e166      	b.n	8000f24 <Process_Command+0x494>
 8000c56:	483c      	ldr	r0, [pc, #240]	@ (8000d48 <Process_Command+0x2b8>)
 8000c58:	f7ff fe92 	bl	8000980 <UART_Send_Response>
 8000c5c:	e169      	b.n	8000f32 <Process_Command+0x4a2>
 8000c5e:	493b      	ldr	r1, [pc, #236]	@ (8000d4c <Process_Command+0x2bc>)
 8000c60:	482e      	ldr	r0, [pc, #184]	@ (8000d1c <Process_Command+0x28c>)
 8000c62:	f7ff fadd 	bl	8000220 <strcmp>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d12b      	bne.n	8000cc4 <Process_Command+0x234>
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <Process_Command+0x294>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d103      	bne.n	8000c7c <Process_Command+0x1ec>
 8000c74:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <Process_Command+0x2ac>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	e153      	b.n	8000f24 <Process_Command+0x494>
 8000c7c:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <Process_Command+0x294>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d103      	bne.n	8000c8c <Process_Command+0x1fc>
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <Process_Command+0x2ac>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	e14b      	b.n	8000f24 <Process_Command+0x494>
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <Process_Command+0x294>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d103      	bne.n	8000c9c <Process_Command+0x20c>
 8000c94:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <Process_Command+0x2ac>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	e143      	b.n	8000f24 <Process_Command+0x494>
 8000c9c:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <Process_Command+0x294>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d103      	bne.n	8000cac <Process_Command+0x21c>
 8000ca4:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <Process_Command+0x2ac>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	e13b      	b.n	8000f24 <Process_Command+0x494>
 8000cac:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <Process_Command+0x294>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d103      	bne.n	8000cbc <Process_Command+0x22c>
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <Process_Command+0x2ac>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	e133      	b.n	8000f24 <Process_Command+0x494>
 8000cbc:	4824      	ldr	r0, [pc, #144]	@ (8000d50 <Process_Command+0x2c0>)
 8000cbe:	f7ff fe5f 	bl	8000980 <UART_Send_Response>
 8000cc2:	e136      	b.n	8000f32 <Process_Command+0x4a2>
 8000cc4:	4923      	ldr	r1, [pc, #140]	@ (8000d54 <Process_Command+0x2c4>)
 8000cc6:	4815      	ldr	r0, [pc, #84]	@ (8000d1c <Process_Command+0x28c>)
 8000cc8:	f7ff faaa 	bl	8000220 <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d113      	bne.n	8000cfa <Process_Command+0x26a>
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <Process_Command+0x294>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <Process_Command+0x252>
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <Process_Command+0x2ac>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	741a      	strb	r2, [r3, #16]
 8000ce0:	e120      	b.n	8000f24 <Process_Command+0x494>
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <Process_Command+0x294>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d103      	bne.n	8000cf2 <Process_Command+0x262>
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <Process_Command+0x2ac>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	741a      	strb	r2, [r3, #16]
 8000cf0:	e118      	b.n	8000f24 <Process_Command+0x494>
 8000cf2:	4819      	ldr	r0, [pc, #100]	@ (8000d58 <Process_Command+0x2c8>)
 8000cf4:	f7ff fe44 	bl	8000980 <UART_Send_Response>
 8000cf8:	e11b      	b.n	8000f32 <Process_Command+0x4a2>
 8000cfa:	4918      	ldr	r1, [pc, #96]	@ (8000d5c <Process_Command+0x2cc>)
 8000cfc:	4807      	ldr	r0, [pc, #28]	@ (8000d1c <Process_Command+0x28c>)
 8000cfe:	f7ff fa8f 	bl	8000220 <strcmp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d137      	bne.n	8000d78 <Process_Command+0x2e8>
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <Process_Command+0x294>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d127      	bne.n	8000d60 <Process_Command+0x2d0>
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <Process_Command+0x2ac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	745a      	strb	r2, [r3, #17]
 8000d16:	e105      	b.n	8000f24 <Process_Command+0x494>
 8000d18:	20000234 	.word	0x20000234
 8000d1c:	20000220 	.word	0x20000220
 8000d20:	08007130 	.word	0x08007130
 8000d24:	20000268 	.word	0x20000268
 8000d28:	0800713c 	.word	0x0800713c
 8000d2c:	08007140 	.word	0x08007140
 8000d30:	08007144 	.word	0x08007144
 8000d34:	08007150 	.word	0x08007150
 8000d38:	08007154 	.word	0x08007154
 8000d3c:	20000078 	.word	0x20000078
 8000d40:	08007164 	.word	0x08007164
 8000d44:	0800718c 	.word	0x0800718c
 8000d48:	0800719c 	.word	0x0800719c
 8000d4c:	080071c0 	.word	0x080071c0
 8000d50:	080071c8 	.word	0x080071c8
 8000d54:	080071e4 	.word	0x080071e4
 8000d58:	080071f8 	.word	0x080071f8
 8000d5c:	08007224 	.word	0x08007224
 8000d60:	4b75      	ldr	r3, [pc, #468]	@ (8000f38 <Process_Command+0x4a8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d103      	bne.n	8000d70 <Process_Command+0x2e0>
 8000d68:	4b74      	ldr	r3, [pc, #464]	@ (8000f3c <Process_Command+0x4ac>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	745a      	strb	r2, [r3, #17]
 8000d6e:	e0d9      	b.n	8000f24 <Process_Command+0x494>
 8000d70:	4873      	ldr	r0, [pc, #460]	@ (8000f40 <Process_Command+0x4b0>)
 8000d72:	f7ff fe05 	bl	8000980 <UART_Send_Response>
 8000d76:	e0dc      	b.n	8000f32 <Process_Command+0x4a2>
 8000d78:	4972      	ldr	r1, [pc, #456]	@ (8000f44 <Process_Command+0x4b4>)
 8000d7a:	4873      	ldr	r0, [pc, #460]	@ (8000f48 <Process_Command+0x4b8>)
 8000d7c:	f7ff fa50 	bl	8000220 <strcmp>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d113      	bne.n	8000dae <Process_Command+0x31e>
 8000d86:	4b6c      	ldr	r3, [pc, #432]	@ (8000f38 <Process_Command+0x4a8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <Process_Command+0x306>
 8000d8e:	4b6b      	ldr	r3, [pc, #428]	@ (8000f3c <Process_Command+0x4ac>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	749a      	strb	r2, [r3, #18]
 8000d94:	e0c6      	b.n	8000f24 <Process_Command+0x494>
 8000d96:	4b68      	ldr	r3, [pc, #416]	@ (8000f38 <Process_Command+0x4a8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d103      	bne.n	8000da6 <Process_Command+0x316>
 8000d9e:	4b67      	ldr	r3, [pc, #412]	@ (8000f3c <Process_Command+0x4ac>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	749a      	strb	r2, [r3, #18]
 8000da4:	e0be      	b.n	8000f24 <Process_Command+0x494>
 8000da6:	4869      	ldr	r0, [pc, #420]	@ (8000f4c <Process_Command+0x4bc>)
 8000da8:	f7ff fdea 	bl	8000980 <UART_Send_Response>
 8000dac:	e0c1      	b.n	8000f32 <Process_Command+0x4a2>
 8000dae:	4968      	ldr	r1, [pc, #416]	@ (8000f50 <Process_Command+0x4c0>)
 8000db0:	4865      	ldr	r0, [pc, #404]	@ (8000f48 <Process_Command+0x4b8>)
 8000db2:	f7ff fa35 	bl	8000220 <strcmp>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d105      	bne.n	8000dc8 <Process_Command+0x338>
 8000dbc:	4b5e      	ldr	r3, [pc, #376]	@ (8000f38 <Process_Command+0x4a8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8000f3c <Process_Command+0x4ac>)
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	e0ad      	b.n	8000f24 <Process_Command+0x494>
 8000dc8:	4962      	ldr	r1, [pc, #392]	@ (8000f54 <Process_Command+0x4c4>)
 8000dca:	485f      	ldr	r0, [pc, #380]	@ (8000f48 <Process_Command+0x4b8>)
 8000dcc:	f7ff fa28 	bl	8000220 <strcmp>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d105      	bne.n	8000de2 <Process_Command+0x352>
 8000dd6:	4b58      	ldr	r3, [pc, #352]	@ (8000f38 <Process_Command+0x4a8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b57      	ldr	r3, [pc, #348]	@ (8000f3c <Process_Command+0x4ac>)
 8000dde:	619a      	str	r2, [r3, #24]
 8000de0:	e0a0      	b.n	8000f24 <Process_Command+0x494>
 8000de2:	495d      	ldr	r1, [pc, #372]	@ (8000f58 <Process_Command+0x4c8>)
 8000de4:	4858      	ldr	r0, [pc, #352]	@ (8000f48 <Process_Command+0x4b8>)
 8000de6:	f7ff fa1b 	bl	8000220 <strcmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d105      	bne.n	8000dfc <Process_Command+0x36c>
 8000df0:	4b51      	ldr	r3, [pc, #324]	@ (8000f38 <Process_Command+0x4a8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <Process_Command+0x4ac>)
 8000df8:	61da      	str	r2, [r3, #28]
 8000dfa:	e093      	b.n	8000f24 <Process_Command+0x494>
 8000dfc:	4957      	ldr	r1, [pc, #348]	@ (8000f5c <Process_Command+0x4cc>)
 8000dfe:	4852      	ldr	r0, [pc, #328]	@ (8000f48 <Process_Command+0x4b8>)
 8000e00:	f7ff fa0e 	bl	8000220 <strcmp>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d105      	bne.n	8000e16 <Process_Command+0x386>
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f38 <Process_Command+0x4a8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b4a      	ldr	r3, [pc, #296]	@ (8000f3c <Process_Command+0x4ac>)
 8000e12:	621a      	str	r2, [r3, #32]
 8000e14:	e086      	b.n	8000f24 <Process_Command+0x494>
 8000e16:	4952      	ldr	r1, [pc, #328]	@ (8000f60 <Process_Command+0x4d0>)
 8000e18:	484b      	ldr	r0, [pc, #300]	@ (8000f48 <Process_Command+0x4b8>)
 8000e1a:	f7ff fa01 	bl	8000220 <strcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d105      	bne.n	8000e30 <Process_Command+0x3a0>
 8000e24:	4b44      	ldr	r3, [pc, #272]	@ (8000f38 <Process_Command+0x4a8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <Process_Command+0x4ac>)
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e2e:	e079      	b.n	8000f24 <Process_Command+0x494>
 8000e30:	494c      	ldr	r1, [pc, #304]	@ (8000f64 <Process_Command+0x4d4>)
 8000e32:	4845      	ldr	r0, [pc, #276]	@ (8000f48 <Process_Command+0x4b8>)
 8000e34:	f7ff f9f4 	bl	8000220 <strcmp>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d105      	bne.n	8000e4a <Process_Command+0x3ba>
 8000e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f38 <Process_Command+0x4a8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <Process_Command+0x4ac>)
 8000e46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e48:	e06c      	b.n	8000f24 <Process_Command+0x494>
 8000e4a:	4947      	ldr	r1, [pc, #284]	@ (8000f68 <Process_Command+0x4d8>)
 8000e4c:	483e      	ldr	r0, [pc, #248]	@ (8000f48 <Process_Command+0x4b8>)
 8000e4e:	f7ff f9e7 	bl	8000220 <strcmp>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <Process_Command+0x3d4>
 8000e58:	4b37      	ldr	r3, [pc, #220]	@ (8000f38 <Process_Command+0x4a8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <Process_Command+0x4ac>)
 8000e60:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e62:	e05f      	b.n	8000f24 <Process_Command+0x494>
 8000e64:	4941      	ldr	r1, [pc, #260]	@ (8000f6c <Process_Command+0x4dc>)
 8000e66:	4838      	ldr	r0, [pc, #224]	@ (8000f48 <Process_Command+0x4b8>)
 8000e68:	f7ff f9da 	bl	8000220 <strcmp>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <Process_Command+0x3ee>
 8000e72:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <Process_Command+0x4a8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <Process_Command+0x4ac>)
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e7c:	e052      	b.n	8000f24 <Process_Command+0x494>
 8000e7e:	493c      	ldr	r1, [pc, #240]	@ (8000f70 <Process_Command+0x4e0>)
 8000e80:	4831      	ldr	r0, [pc, #196]	@ (8000f48 <Process_Command+0x4b8>)
 8000e82:	f7ff f9cd 	bl	8000220 <strcmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d105      	bne.n	8000e98 <Process_Command+0x408>
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <Process_Command+0x4a8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <Process_Command+0x4ac>)
 8000e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e96:	e045      	b.n	8000f24 <Process_Command+0x494>
 8000e98:	4936      	ldr	r1, [pc, #216]	@ (8000f74 <Process_Command+0x4e4>)
 8000e9a:	482b      	ldr	r0, [pc, #172]	@ (8000f48 <Process_Command+0x4b8>)
 8000e9c:	f7ff f9c0 	bl	8000220 <strcmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d105      	bne.n	8000eb2 <Process_Command+0x422>
 8000ea6:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <Process_Command+0x4a8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <Process_Command+0x4ac>)
 8000eae:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eb0:	e038      	b.n	8000f24 <Process_Command+0x494>
 8000eb2:	4931      	ldr	r1, [pc, #196]	@ (8000f78 <Process_Command+0x4e8>)
 8000eb4:	4824      	ldr	r0, [pc, #144]	@ (8000f48 <Process_Command+0x4b8>)
 8000eb6:	f7ff f9b3 	bl	8000220 <strcmp>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d114      	bne.n	8000eea <Process_Command+0x45a>
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <Process_Command+0x4a8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d103      	bne.n	8000ed0 <Process_Command+0x440>
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <Process_Command+0x4ac>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ece:	e029      	b.n	8000f24 <Process_Command+0x494>
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <Process_Command+0x4a8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d104      	bne.n	8000ee2 <Process_Command+0x452>
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <Process_Command+0x4ac>)
 8000eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ede:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee0:	e020      	b.n	8000f24 <Process_Command+0x494>
 8000ee2:	4826      	ldr	r0, [pc, #152]	@ (8000f7c <Process_Command+0x4ec>)
 8000ee4:	f7ff fd4c 	bl	8000980 <UART_Send_Response>
 8000ee8:	e023      	b.n	8000f32 <Process_Command+0x4a2>
 8000eea:	4925      	ldr	r1, [pc, #148]	@ (8000f80 <Process_Command+0x4f0>)
 8000eec:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <Process_Command+0x4b8>)
 8000eee:	f7ff f997 	bl	8000220 <strcmp>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d111      	bne.n	8000f1c <Process_Command+0x48c>
 8000ef8:	4a22      	ldr	r2, [pc, #136]	@ (8000f84 <Process_Command+0x4f4>)
 8000efa:	4923      	ldr	r1, [pc, #140]	@ (8000f88 <Process_Command+0x4f8>)
 8000efc:	4823      	ldr	r0, [pc, #140]	@ (8000f8c <Process_Command+0x4fc>)
 8000efe:	f005 f90f 	bl	8006120 <siscanf>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d105      	bne.n	8000f14 <Process_Command+0x484>
 8000f08:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <Process_Command+0x4f4>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f847 	bl	8000fa0 <SET_RXHeader>
 8000f12:	e007      	b.n	8000f24 <Process_Command+0x494>
 8000f14:	481e      	ldr	r0, [pc, #120]	@ (8000f90 <Process_Command+0x500>)
 8000f16:	f7ff fd33 	bl	8000980 <UART_Send_Response>
 8000f1a:	e00a      	b.n	8000f32 <Process_Command+0x4a2>
 8000f1c:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <Process_Command+0x504>)
 8000f1e:	f7ff fd2f 	bl	8000980 <UART_Send_Response>
 8000f22:	e006      	b.n	8000f32 <Process_Command+0x4a2>
 8000f24:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <Process_Command+0x508>)
 8000f26:	f7ff fd2b 	bl	8000980 <UART_Send_Response>
 8000f2a:	e002      	b.n	8000f32 <Process_Command+0x4a2>
 8000f2c:	481b      	ldr	r0, [pc, #108]	@ (8000f9c <Process_Command+0x50c>)
 8000f2e:	f7ff fd27 	bl	8000980 <UART_Send_Response>
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000268 	.word	0x20000268
 8000f3c:	20000078 	.word	0x20000078
 8000f40:	08007234 	.word	0x08007234
 8000f44:	0800725c 	.word	0x0800725c
 8000f48:	20000220 	.word	0x20000220
 8000f4c:	08007270 	.word	0x08007270
 8000f50:	0800729c 	.word	0x0800729c
 8000f54:	080072b0 	.word	0x080072b0
 8000f58:	080072c0 	.word	0x080072c0
 8000f5c:	080072d4 	.word	0x080072d4
 8000f60:	080072e8 	.word	0x080072e8
 8000f64:	080072f8 	.word	0x080072f8
 8000f68:	08007308 	.word	0x08007308
 8000f6c:	08007318 	.word	0x08007318
 8000f70:	08007328 	.word	0x08007328
 8000f74:	08007338 	.word	0x08007338
 8000f78:	08007348 	.word	0x08007348
 8000f7c:	0800735c 	.word	0x0800735c
 8000f80:	08007388 	.word	0x08007388
 8000f84:	2000026c 	.word	0x2000026c
 8000f88:	08007394 	.word	0x08007394
 8000f8c:	20000234 	.word	0x20000234
 8000f90:	08007398 	.word	0x08007398
 8000f94:	080073bc 	.word	0x080073bc
 8000f98:	08007150 	.word	0x08007150
 8000f9c:	080073d0 	.word	0x080073d0

08000fa0 <SET_RXHeader>:
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4a03      	ldr	r2, [pc, #12]	@ (8000fbc <SET_RXHeader+0x1c>)
 8000fae:	6113      	str	r3, [r2, #16]
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000178 	.word	0x20000178

08000fc0 <send_Frame>:
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f933 	bl	8000234 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d91e      	bls.n	8001012 <send_Frame+0x52>
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	4810      	ldr	r0, [pc, #64]	@ (800101c <send_Frame+0x5c>)
 8000fda:	f005 f8e4 	bl	80061a6 <strncpy>
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <send_Frame+0x5c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	70da      	strb	r2, [r3, #3]
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <send_Frame+0x60>)
 8000fe6:	490f      	ldr	r1, [pc, #60]	@ (8001024 <send_Frame+0x64>)
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <send_Frame+0x5c>)
 8000fea:	f005 f899 	bl	8006120 <siscanf>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d104      	bne.n	8000ffe <send_Frame+0x3e>
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <send_Frame+0x60>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <send_Frame+0x68>)
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e005      	b.n	800100a <send_Frame+0x4a>
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <send_Frame+0x6c>)
 8001000:	f7ff fcbe 	bl	8000980 <UART_Send_Response>
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f004 fee3 	bl	8005dd0 <free>
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f810 	bl	8001030 <Extract_Data_Until_CR>
 8001010:	e000      	b.n	8001014 <send_Frame+0x54>
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000270 	.word	0x20000270
 8001020:	20000274 	.word	0x20000274
 8001024:	080073e4 	.word	0x080073e4
 8001028:	20000190 	.word	0x20000190
 800102c:	080073e8 	.word	0x080073e8

08001030 <Extract_Data_Until_CR>:
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800103c:	f004 fec0 	bl	8005dc0 <malloc>
 8001040:	4603      	mov	r3, r0
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d107      	bne.n	800105a <Extract_Data_Until_CR+0x2a>
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	221e      	movs	r2, #30
 8001050:	4941      	ldr	r1, [pc, #260]	@ (8001158 <Extract_Data_Until_CR+0x128>)
 8001052:	4842      	ldr	r0, [pc, #264]	@ (800115c <Extract_Data_Until_CR+0x12c>)
 8001054:	f002 fde8 	bl	8003c28 <HAL_UART_Transmit>
 8001058:	e07a      	b.n	8001150 <Extract_Data_Until_CR+0x120>
 800105a:	210d      	movs	r1, #13
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f005 f895 	bl	800618c <strchr>
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d06f      	beq.n	800114a <Extract_Data_Until_CR+0x11a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3304      	adds	r3, #4
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	dd67      	ble.n	800114a <Extract_Data_Until_CR+0x11a>
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2bff      	cmp	r3, #255	@ 0xff
 800107e:	dc64      	bgt.n	800114a <Extract_Data_Until_CR+0x11a>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d15f      	bne.n	800114a <Extract_Data_Until_CR+0x11a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3304      	adds	r3, #4
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4619      	mov	r1, r3
 8001092:	6938      	ldr	r0, [r7, #16]
 8001094:	f005 f887 	bl	80061a6 <strncpy>
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4413      	add	r3, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e01b      	b.n	80010e0 <Extract_Data_Until_CR+0xb0>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	461a      	mov	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4413      	add	r3, r2
 80010b2:	2202      	movs	r2, #2
 80010b4:	4619      	mov	r1, r3
 80010b6:	482a      	ldr	r0, [pc, #168]	@ (8001160 <Extract_Data_Until_CR+0x130>)
 80010b8:	f005 f875 	bl	80061a6 <strncpy>
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <Extract_Data_Until_CR+0x130>)
 80010be:	2200      	movs	r2, #0
 80010c0:	709a      	strb	r2, [r3, #2]
 80010c2:	2210      	movs	r2, #16
 80010c4:	2100      	movs	r1, #0
 80010c6:	4826      	ldr	r0, [pc, #152]	@ (8001160 <Extract_Data_Until_CR+0x130>)
 80010c8:	f004 ffea 	bl	80060a0 <strtol>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b2d9      	uxtb	r1, r3
 80010d0:	4a24      	ldr	r2, [pc, #144]	@ (8001164 <Extract_Data_Until_CR+0x134>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	0fda      	lsrs	r2, r3, #31
 80010e4:	4413      	add	r3, r2
 80010e6:	105b      	asrs	r3, r3, #1
 80010e8:	461a      	mov	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	da02      	bge.n	80010f6 <Extract_Data_Until_CR+0xc6>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010f4:	ddd8      	ble.n	80010a8 <Extract_Data_Until_CR+0x78>
 80010f6:	481c      	ldr	r0, [pc, #112]	@ (8001168 <Extract_Data_Until_CR+0x138>)
 80010f8:	f000 fd0c 	bl	8001b14 <HAL_FDCAN_Init>
 80010fc:	481a      	ldr	r0, [pc, #104]	@ (8001168 <Extract_Data_Until_CR+0x138>)
 80010fe:	f000 feee 	bl	8001ede <HAL_FDCAN_Start>
 8001102:	2200      	movs	r2, #0
 8001104:	2101      	movs	r1, #1
 8001106:	4818      	ldr	r0, [pc, #96]	@ (8001168 <Extract_Data_Until_CR+0x138>)
 8001108:	f001 f870 	bl	80021ec <HAL_FDCAN_ActivateNotification>
 800110c:	bf00      	nop
 800110e:	4816      	ldr	r0, [pc, #88]	@ (8001168 <Extract_Data_Until_CR+0x138>)
 8001110:	f001 f85a 	bl	80021c8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f9      	beq.n	800110e <Extract_Data_Until_CR+0xde>
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <Extract_Data_Until_CR+0x134>)
 800111c:	4913      	ldr	r1, [pc, #76]	@ (800116c <Extract_Data_Until_CR+0x13c>)
 800111e:	4812      	ldr	r0, [pc, #72]	@ (8001168 <Extract_Data_Until_CR+0x138>)
 8001120:	f000 ff05 	bl	8001f2e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <Extract_Data_Until_CR+0x140>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <Extract_Data_Until_CR+0x140>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <Extract_Data_Until_CR+0x112>
 8001134:	480f      	ldr	r0, [pc, #60]	@ (8001174 <Extract_Data_Until_CR+0x144>)
 8001136:	f7ff fc23 	bl	8000980 <UART_Send_Response>
 800113a:	6938      	ldr	r0, [r7, #16]
 800113c:	f004 fe48 	bl	8005dd0 <free>
 8001140:	e006      	b.n	8001150 <Extract_Data_Until_CR+0x120>
 8001142:	6938      	ldr	r0, [r7, #16]
 8001144:	f004 fe44 	bl	8005dd0 <free>
 8001148:	e002      	b.n	8001150 <Extract_Data_Until_CR+0x120>
 800114a:	6938      	ldr	r0, [r7, #16]
 800114c:	f004 fe40 	bl	8005dd0 <free>
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	080073fc 	.word	0x080073fc
 800115c:	200000dc 	.word	0x200000dc
 8001160:	200002b8 	.word	0x200002b8
 8001164:	20000278 	.word	0x20000278
 8001168:	20000078 	.word	0x20000078
 800116c:	20000190 	.word	0x20000190
 8001170:	200001b5 	.word	0x200001b5
 8001174:	08007420 	.word	0x08007420

08001178 <UART_received_Response>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b0b8      	sub	sp, #224	@ 0xe0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800118a:	e05e      	b.n	800124a <UART_received_Response+0xd2>
 800118c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001190:	4613      	mov	r3, r2
 8001192:	015b      	lsls	r3, r3, #5
 8001194:	4413      	add	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	461a      	mov	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	f107 000c 	add.w	r0, r7, #12
 80011a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <UART_received_Response+0xe8>)
 80011a6:	21c8      	movs	r1, #200	@ 0xc8
 80011a8:	f004 ff84 	bl	80060b4 <sniprintf>
 80011ac:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80011b6:	e024      	b.n	8001202 <UART_received_Response+0x8a>
 80011b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011bc:	f107 020c 	add.w	r2, r7, #12
 80011c0:	18d0      	adds	r0, r2, r3
 80011c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011c6:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80011ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80011ce:	4613      	mov	r3, r2
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	441a      	add	r2, r3
 80011dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011e0:	4413      	add	r3, r2
 80011e2:	3302      	adds	r3, #2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <UART_received_Response+0xec>)
 80011e8:	f004 ff64 	bl	80060b4 <sniprintf>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011f2:	4413      	add	r3, r2
 80011f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80011f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001206:	2b3f      	cmp	r3, #63	@ 0x3f
 8001208:	ddd6      	ble.n	80011b8 <UART_received_Response+0x40>
 800120a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	18d0      	adds	r0, r2, r3
 8001214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001218:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <UART_received_Response+0xf0>)
 800121e:	4619      	mov	r1, r3
 8001220:	f004 ff48 	bl	80060b4 <sniprintf>
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f803 	bl	8000234 <strlen>
 800122e:	4603      	mov	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	f107 010c 	add.w	r1, r7, #12
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	480c      	ldr	r0, [pc, #48]	@ (800126c <UART_received_Response+0xf4>)
 800123c:	f002 fcf4 	bl	8003c28 <HAL_UART_Transmit>
 8001240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001244:	3301      	adds	r3, #1
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001250:	429a      	cmp	r2, r3
 8001252:	db9b      	blt.n	800118c <UART_received_Response+0x14>
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	37e0      	adds	r7, #224	@ 0xe0
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	0800743c 	.word	0x0800743c
 8001264:	0800744c 	.word	0x0800744c
 8001268:	08007454 	.word	0x08007454
 800126c:	200000dc 	.word	0x200000dc

08001270 <HAL_FDCAN_RxFifo0Callback>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d059      	beq.n	8001338 <HAL_FDCAN_RxFifo0Callback+0xc8>
 8001284:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8001286:	4a2f      	ldr	r2, [pc, #188]	@ (8001344 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fe94 	bl	8001fb8 <HAL_FDCAN_GetRxMessage>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_FDCAN_RxFifo0Callback+0x2a>
 8001296:	f000 f85b 	bl	8001350 <Error_Handler>
 800129a:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d14a      	bne.n	8001338 <HAL_FDCAN_RxFifo0Callback+0xc8>
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	d146      	bne.n	8001338 <HAL_FDCAN_RxFifo0Callback+0xc8>
 80012aa:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d83b      	bhi.n	800132a <HAL_FDCAN_RxFifo0Callback+0xba>
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	b290      	uxth	r0, r2
 80012be:	4a23      	ldr	r2, [pc, #140]	@ (800134c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80012c0:	460b      	mov	r3, r1
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	440b      	add	r3, r1
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	4602      	mov	r2, r0
 80012cc:	801a      	strh	r2, [r3, #0]
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4613      	mov	r3, r2
 80012d6:	015b      	lsls	r3, r3, #5
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80012de:	4413      	add	r3, r2
 80012e0:	3302      	adds	r3, #2
 80012e2:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 80012e4:	4614      	mov	r4, r2
 80012e6:	469c      	mov	ip, r3
 80012e8:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 80012ec:	4665      	mov	r5, ip
 80012ee:	4626      	mov	r6, r4
 80012f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012f2:	6028      	str	r0, [r5, #0]
 80012f4:	6069      	str	r1, [r5, #4]
 80012f6:	60aa      	str	r2, [r5, #8]
 80012f8:	60eb      	str	r3, [r5, #12]
 80012fa:	3410      	adds	r4, #16
 80012fc:	f10c 0c10 	add.w	ip, ip, #16
 8001300:	4574      	cmp	r4, lr
 8001302:	d1f3      	bne.n	80012ec <HAL_FDCAN_RxFifo0Callback+0x7c>
 8001304:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4613      	mov	r3, r2
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	4413      	add	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8001314:	4413      	add	r3, r2
 8001316:	2101      	movs	r1, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff2d 	bl	8001178 <UART_received_Response>
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d902      	bls.n	8001338 <HAL_FDCAN_RxFifo0Callback+0xc8>
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	200001e0 	.word	0x200001e0
 8001344:	200001b8 	.word	0x200001b8
 8001348:	200001b6 	.word	0x200001b6
 800134c:	200002bc 	.word	0x200002bc

08001350 <Error_Handler>:
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
 8001354:	b672      	cpsid	i
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <Error_Handler+0x8>

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_MspInit+0x44>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001366:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	@ 0x60
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <HAL_MspInit+0x44>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_MspInit+0x44>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_MspInit+0x44>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6593      	str	r3, [r2, #88]	@ 0x58
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_MspInit+0x44>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001392:	f001 fccb 	bl	8002d2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09a      	sub	sp, #104	@ 0x68
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2244      	movs	r2, #68	@ 0x44
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 fed9 	bl	800617c <memset>
  if(hfdcan->Instance==FDCAN1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a24      	ldr	r2, [pc, #144]	@ (8001460 <HAL_FDCAN_MspInit+0xbc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d141      	bne.n	8001458 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80013da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013de:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 f9df 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80013f0:	f7ff ffae 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_FDCAN_MspInit+0xc0>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001464 <HAL_FDCAN_MspInit+0xc0>)
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001400:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <HAL_FDCAN_MspInit+0xc0>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_FDCAN_MspInit+0xc0>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <HAL_FDCAN_MspInit+0xc0>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_FDCAN_MspInit+0xc0>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001424:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001428:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001436:	2309      	movs	r3, #9
 8001438:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001444:	f001 fa34 	bl	80028b0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2015      	movs	r0, #21
 800144e:	f000 fa6c 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001452:	2015      	movs	r0, #21
 8001454:	f000 fa83 	bl	800195e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001458:	bf00      	nop
 800145a:	3768      	adds	r7, #104	@ 0x68
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40006400 	.word	0x40006400
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b09a      	sub	sp, #104	@ 0x68
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	2244      	movs	r2, #68	@ 0x44
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fe77 	bl	800617c <memset>
  if(huart->Instance==USART2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <HAL_UART_MspInit+0xb8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d13e      	bne.n	8001516 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 f97f 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b0:	f7ff ff4e 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_UART_MspInit+0xbc>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001524 <HAL_UART_MspInit+0xbc>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014be:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_UART_MspInit+0xbc>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_UART_MspInit+0xbc>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	4a14      	ldr	r2, [pc, #80]	@ (8001524 <HAL_UART_MspInit+0xbc>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_UART_MspInit+0xbc>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014e4:	230c      	movs	r3, #12
 80014e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f4:	2307      	movs	r3, #7
 80014f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001502:	f001 f9d5 	bl	80028b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2026      	movs	r0, #38	@ 0x26
 800150c:	f000 fa0d 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001510:	2026      	movs	r0, #38	@ 0x26
 8001512:	f000 fa24 	bl	800195e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001516:	bf00      	nop
 8001518:	3768      	adds	r7, #104	@ 0x68
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40004400 	.word	0x40004400
 8001524:	40021000 	.word	0x40021000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <NMI_Handler+0x4>

08001530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <MemManage_Handler+0x4>

08001540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <UsageFault_Handler+0x4>

08001550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157e:	f000 f8db 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <FDCAN1_IT0_IRQHandler+0x10>)
 800158e:	f000 ff13 	bl	80023b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000078 	.word	0x20000078

0800159c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <USART2_IRQHandler+0x10>)
 80015a2:	f002 fc1b 	bl	8003ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200000dc 	.word	0x200000dc

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f004 fe04 	bl	80061ec <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20008000 	.word	0x20008000
 8001610:	00000400 	.word	0x00000400
 8001614:	20000340 	.word	0x20000340
 8001618:	20000490 	.word	0x20000490

0800161c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <SystemInit+0x20>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <SystemInit+0x20>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001640:	480d      	ldr	r0, [pc, #52]	@ (8001678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001642:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001644:	f7ff ffea 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopForever+0x6>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopForever+0xe>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopForever+0x16>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800166e:	f004 fdc3 	bl	80061f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001672:	f7fe ffd3 	bl	800061c <main>

08001676 <LoopForever>:

LoopForever:
    b LoopForever
 8001676:	e7fe      	b.n	8001676 <LoopForever>
  ldr   r0, =_estack
 8001678:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001684:	08007614 	.word	0x08007614
  ldr r2, =_sbss
 8001688:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800168c:	20000490 	.word	0x20000490

08001690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_2_IRQHandler>

08001692 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f939 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f80e 	bl	80016c4 <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	e001      	b.n	80016b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b4:	f7ff fe52 	bl	800135c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b8:	79fb      	ldrb	r3, [r7, #7]

}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <HAL_InitTick+0x68>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d022      	beq.n	800171e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_InitTick+0x6c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <HAL_InitTick+0x68>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f944 	bl	800197a <HAL_SYSTICK_Config>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10f      	bne.n	8001718 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	d809      	bhi.n	8001712 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fe:	2200      	movs	r2, #0
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	f04f 30ff 	mov.w	r0, #4294967295
 8001706:	f000 f910 	bl	800192a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_InitTick+0x70>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e007      	b.n	8001722 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e004      	b.n	8001722 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e001      	b.n	8001722 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000008 	.word	0x20000008
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_IncTick+0x1c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_IncTick+0x20>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4413      	add	r3, r2
 8001746:	4a03      	ldr	r2, [pc, #12]	@ (8001754 <HAL_IncTick+0x1c>)
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000344 	.word	0x20000344
 8001758:	20000008 	.word	0x20000008

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000344 	.word	0x20000344

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	@ (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff40 	bl	80017bc <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff90 	bl	8001868 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5f 	bl	8001814 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff33 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa4 	bl	80018d0 <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d005      	beq.n	80019b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2204      	movs	r2, #4
 80019ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e037      	b.n	8001a26 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 020e 	bic.w	r2, r2, #14
 80019c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f003 021f 	and.w	r2, r3, #31
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a02:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a1a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a24:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d00d      	beq.n	8001a78 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e047      	b.n	8001b08 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 020e 	bic.w	r2, r2, #14
 8001a86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ac4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001adc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ae6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
    }
  }
  return status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e147      	b.n	8001db6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fc32 	bl	80013a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0210 	bic.w	r2, r2, #16
 8001b4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff fe04 	bl	800175c <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b56:	e012      	b.n	8001b7e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b58:	f7ff fe00 	bl	800175c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b0a      	cmp	r3, #10
 8001b64:	d90b      	bls.n	8001b7e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e11b      	b.n	8001db6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d0e5      	beq.n	8001b58 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9c:	f7ff fdde 	bl	800175c <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ba2:	e012      	b.n	8001bca <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ba4:	f7ff fdda 	bl	800175c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b0a      	cmp	r3, #10
 8001bb0:	d90b      	bls.n	8001bca <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0f5      	b.n	8001db6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0e5      	beq.n	8001ba4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0202 	orr.w	r2, r2, #2
 8001be6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a74      	ldr	r2, [pc, #464]	@ (8001dc0 <HAL_FDCAN_Init+0x2ac>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d103      	bne.n	8001bfa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001bf2:	4a74      	ldr	r2, [pc, #464]	@ (8001dc4 <HAL_FDCAN_Init+0x2b0>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7c1b      	ldrb	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c10:	619a      	str	r2, [r3, #24]
 8001c12:	e007      	b.n	8001c24 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c22:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7c5b      	ldrb	r3, [r3, #17]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d108      	bne.n	8001c3e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c3a:	619a      	str	r2, [r3, #24]
 8001c3c:	e007      	b.n	8001c4e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7c9b      	ldrb	r3, [r3, #18]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d108      	bne.n	8001c68 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	e007      	b.n	8001c78 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c76:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001c9c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0210 	bic.w	r2, r2, #16
 8001cac:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d108      	bne.n	8001cc8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0204 	orr.w	r2, r2, #4
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	e02c      	b.n	8001d22 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d028      	beq.n	8001d22 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d01c      	beq.n	8001d12 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ce6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0210 	orr.w	r2, r2, #16
 8001cf6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d110      	bne.n	8001d22 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	619a      	str	r2, [r3, #24]
 8001d10:	e007      	b.n	8001d22 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d32:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d3a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d4a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d4c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d56:	d115      	bne.n	8001d84 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d62:	3b01      	subs	r3, #1
 8001d64:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d66:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d70:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d80:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d82:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fcb6 	bl	800270c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40006400 	.word	0x40006400
 8001dc4:	40006500 	.word	0x40006500

08001dc8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001dd8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d002      	beq.n	8001de6 <HAL_FDCAN_ConfigFilter+0x1e>
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d13d      	bne.n	8001e62 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001dfa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001e02:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e01d      	b.n	8001e5e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	075a      	lsls	r2, r3, #29
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	079a      	lsls	r2, r3, #30
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3304      	adds	r3, #4
 8001e56:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e006      	b.n	8001e70 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d116      	bne.n	8001ec4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e9e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	011a      	lsls	r2, r3, #4
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e006      	b.n	8001ed2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d110      	bne.n	8001f14 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e006      	b.n	8001f22 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f18:	f043 0204 	orr.w	r2, r3, #4
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d12c      	bne.n	8001fa0 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e023      	b.n	8001fae <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fc1b 	bl	80027b8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001f92:	2201      	movs	r2, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e006      	b.n	8001fae <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa4:	f043 0208 	orr.w	r2, r3, #8
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b08b      	sub	sp, #44	@ 0x2c
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fd0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001fd2:	7efb      	ldrb	r3, [r7, #27]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	f040 80e8 	bne.w	80021aa <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b40      	cmp	r3, #64	@ 0x40
 8001fde:	d137      	bne.n	8002050 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0db      	b.n	80021b8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002010:	d10a      	bne.n	8002028 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800201e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002022:	d101      	bne.n	8002028 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002024:	2301      	movs	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
 800204e:	e036      	b.n	80020be <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	2b00      	cmp	r3, #0
 800205e:	d107      	bne.n	8002070 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002064:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0a3      	b.n	80021b8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d10a      	bne.n	8002098 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800208a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002092:	d101      	bne.n	8002098 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002094:	2301      	movs	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	4413      	add	r3, r2
 80020aa:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0c9b      	lsrs	r3, r3, #18
 80020d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e005      	b.n	80020ee <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	3304      	adds	r3, #4
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0e1b      	lsrs	r3, r3, #24
 8002142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0fda      	lsrs	r2, r3, #31
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	3304      	adds	r3, #4
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	e00a      	b.n	800217a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	441a      	add	r2, r3
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	440b      	add	r3, r1
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	3301      	adds	r3, #1
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4a11      	ldr	r2, [pc, #68]	@ (80021c4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	461a      	mov	r2, r3
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	4293      	cmp	r3, r2
 8002188:	d3ec      	bcc.n	8002164 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b40      	cmp	r3, #64	@ 0x40
 800218e:	d105      	bne.n	800219c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800219a:	e004      	b.n	80021a6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e006      	b.n	80021b8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	f043 0208 	orr.w	r2, r3, #8
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	372c      	adds	r7, #44	@ 0x2c
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	0800747c 	.word	0x0800747c

080021c8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021fe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d003      	beq.n	800220e <HAL_FDCAN_ActivateNotification+0x22>
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b02      	cmp	r3, #2
 800220a:	f040 80c8 	bne.w	800239e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002214:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03b      	beq.n	80022a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d031      	beq.n	80022a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d027      	beq.n	80022a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01d      	beq.n	80022a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d013      	beq.n	80022a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00c      	beq.n	80022b2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d13b      	bne.n	800233e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d131      	bne.n	800233e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d127      	bne.n	800233e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d11d      	bne.n	800233e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d113      	bne.n	800233e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0202 	orr.w	r2, r2, #2
 800234c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	430a      	orrs	r2, r1
 8002368:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	430a      	orrs	r2, r1
 8002386:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	430a      	orrs	r2, r1
 8002398:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e006      	b.n	80023ac <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a2:	f043 0202 	orr.w	r2, r3, #2
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	@ 0x30
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d4:	4013      	ands	r3, r2
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ec:	4013      	ands	r3, r2
 80023ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002404:	4013      	ands	r3, r2
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002412:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	6a3a      	ldr	r2, [r7, #32]
 800241c:	4013      	ands	r3, r2
 800241e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002426:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800242a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4013      	ands	r3, r2
 8002436:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002446:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00c      	beq.n	800246e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2240      	movs	r2, #64	@ 0x40
 8002466:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f922 	bl	80026b2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01a      	beq.n	80024b0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d014      	beq.n	80024b0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800248e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8e2 	bl	8002674 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80024b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80024be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f8ac 	bl	800261e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80024c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80024d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe feca 	bl	8001270 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80024ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8a1 	bl	8002634 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	0a5b      	lsrs	r3, r3, #9
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	0a5b      	lsrs	r3, r3, #9
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002512:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f898 	bl	800264a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	09db      	lsrs	r3, r3, #7
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	09db      	lsrs	r3, r3, #7
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d013      	beq.n	800255a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800253a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2280      	movs	r2, #128	@ 0x80
 8002550:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f882 	bl	800265e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	0b5b      	lsrs	r3, r3, #13
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	0b5b      	lsrs	r3, r3, #13
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800257a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f884 	bl	800268a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	0bdb      	lsrs	r3, r3, #15
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	0bdb      	lsrs	r3, r3, #15
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f87a 	bl	800269e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	0b9b      	lsrs	r3, r3, #14
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	0b9b      	lsrs	r3, r3, #14
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80025e6:	69f9      	ldr	r1, [r7, #28]
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f876 	bl	80026da <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d009      	beq.n	8002608 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f858 	bl	80026c6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002616:	bf00      	nop
 8002618:	3730      	adds	r7, #48	@ 0x30
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_FDCAN_GetState>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL state
  */
HAL_FDCAN_StateTypeDef HAL_FDCAN_GetState(const FDCAN_HandleTypeDef *hfdcan)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Return FDCAN state */
  return hfdcan->State;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026fe:	b2db      	uxtb	r3, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002714:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002716:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002726:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272e:	041a      	lsls	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800274c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	061a      	lsls	r2, r3, #24
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e005      	b.n	800279a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3304      	adds	r3, #4
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3f3      	bcc.n	800278e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	4000a400 	.word	0x4000a400

080027b8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	@ 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80027d6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027de:	4313      	orrs	r3, r2
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e00a      	b.n	80027fa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80027ec:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80027f2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027f8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002804:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800280a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002810:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	3304      	adds	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	3304      	adds	r3, #4
 8002844:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e020      	b.n	800288e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3303      	adds	r3, #3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3302      	adds	r3, #2
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	440b      	add	r3, r1
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002864:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	440b      	add	r3, r1
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002872:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	440a      	add	r2, r1
 800287a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800287c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	3304      	adds	r3, #4
 8002886:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3304      	adds	r3, #4
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a06      	ldr	r2, [pc, #24]	@ (80028ac <FDCAN_CopyMessageToRAM+0xf4>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	461a      	mov	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	4293      	cmp	r3, r2
 800289c:	d3d6      	bcc.n	800284c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	3724      	adds	r7, #36	@ 0x24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	0800747c 	.word	0x0800747c

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028be:	e15a      	b.n	8002b76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 814c 	beq.w	8002b70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d005      	beq.n	80028f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d130      	bne.n	8002952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002926:	2201      	movs	r2, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0201 	and.w	r2, r3, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b03      	cmp	r3, #3
 800295c:	d017      	beq.n	800298e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d123      	bne.n	80029e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80a6 	beq.w	8002b70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a24:	4b5b      	ldr	r3, [pc, #364]	@ (8002b94 <HAL_GPIO_Init+0x2e4>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a28:	4a5a      	ldr	r2, [pc, #360]	@ (8002b94 <HAL_GPIO_Init+0x2e4>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a30:	4b58      	ldr	r3, [pc, #352]	@ (8002b94 <HAL_GPIO_Init+0x2e4>)
 8002a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3c:	4a56      	ldr	r2, [pc, #344]	@ (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a66:	d01f      	beq.n	8002aa8 <HAL_GPIO_Init+0x1f8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b9c <HAL_GPIO_Init+0x2ec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d019      	beq.n	8002aa4 <HAL_GPIO_Init+0x1f4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <HAL_GPIO_Init+0x2f0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_GPIO_Init+0x1f0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba4 <HAL_GPIO_Init+0x2f4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00d      	beq.n	8002a9c <HAL_GPIO_Init+0x1ec>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a49      	ldr	r2, [pc, #292]	@ (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d007      	beq.n	8002a98 <HAL_GPIO_Init+0x1e8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a48      	ldr	r2, [pc, #288]	@ (8002bac <HAL_GPIO_Init+0x2fc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_GPIO_Init+0x1e4>
 8002a90:	2305      	movs	r3, #5
 8002a92:	e00a      	b.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002a94:	2306      	movs	r3, #6
 8002a96:	e008      	b.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e006      	b.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e004      	b.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e002      	b.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	f002 0203 	and.w	r2, r2, #3
 8002ab0:	0092      	lsls	r2, r2, #2
 8002ab2:	4093      	lsls	r3, r2
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aba:	4937      	ldr	r1, [pc, #220]	@ (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aec:	4a30      	ldr	r2, [pc, #192]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002af2:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b16:	4a26      	ldr	r2, [pc, #152]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b1c:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b40:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b6a:	4a11      	ldr	r2, [pc, #68]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3301      	adds	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f47f ae9d 	bne.w	80028c0 <HAL_GPIO_Init+0x10>
  }
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	48000400 	.word	0x48000400
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000c00 	.word	0x48000c00
 8002ba8:	48001000 	.word	0x48001000
 8002bac:	48001400 	.word	0x48001400
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d141      	bne.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfe:	d131      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c00:	4b47      	ldr	r3, [pc, #284]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c06:	4a46      	ldr	r2, [pc, #280]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c10:	4b43      	ldr	r3, [pc, #268]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c18:	4a41      	ldr	r2, [pc, #260]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c20:	4b40      	ldr	r3, [pc, #256]	@ (8002d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2232      	movs	r2, #50	@ 0x32
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	0c9b      	lsrs	r3, r3, #18
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c36:	e002      	b.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3e:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4a:	d102      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f2      	bne.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c52:	4b33      	ldr	r3, [pc, #204]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5e:	d158      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e057      	b.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c64:	4b2e      	ldr	r3, [pc, #184]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c74:	e04d      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c7c:	d141      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7e:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8a:	d131      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c8c:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c92:	4a23      	ldr	r2, [pc, #140]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9c:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2232      	movs	r2, #50	@ 0x32
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc2:	e002      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd6:	d102      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f2      	bne.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cde:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cea:	d112      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e011      	b.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d00:	e007      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d02:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40007000 	.word	0x40007000
 8002d24:	20000000 	.word	0x20000000
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a04      	ldr	r2, [pc, #16]	@ (8002d48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40007000 	.word	0x40007000

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e2fe      	b.n	800335c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d075      	beq.n	8002e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6a:	4b97      	ldr	r3, [pc, #604]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d74:	4b94      	ldr	r3, [pc, #592]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d102      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3e>
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_OscConfig+0x44>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d10b      	bne.n	8002da8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	4b8d      	ldr	r3, [pc, #564]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x108>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d157      	bne.n	8002e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e2d9      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x74>
 8002db2:	4b85      	ldr	r3, [pc, #532]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a84      	ldr	r2, [pc, #528]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xb0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x98>
 8002dca:	4b7f      	ldr	r3, [pc, #508]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7e      	ldr	r2, [pc, #504]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7b      	ldr	r2, [pc, #492]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xb0>
 8002de4:	4b78      	ldr	r3, [pc, #480]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a77      	ldr	r2, [pc, #476]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b75      	ldr	r3, [pc, #468]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a74      	ldr	r2, [pc, #464]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fcaa 	bl	800175c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fca6 	bl	800175c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e29e      	b.n	800335c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xc0>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fc96 	bl	800175c <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fc92 	bl	800175c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e28a      	b.n	800335c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e46:	4b60      	ldr	r3, [pc, #384]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0xe8>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d075      	beq.n	8002f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e62:	4b59      	ldr	r3, [pc, #356]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6c:	4b56      	ldr	r3, [pc, #344]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d102      	bne.n	8002e82 <HAL_RCC_OscConfig+0x136>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_OscConfig+0x13c>
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d11f      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x154>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e25d      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b49      	ldr	r3, [pc, #292]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	061b      	lsls	r3, r3, #24
 8002eae:	4946      	ldr	r1, [pc, #280]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002eb4:	4b45      	ldr	r3, [pc, #276]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fc03 	bl	80016c4 <HAL_InitTick>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d043      	beq.n	8002f4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e249      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fc3e 	bl	800175c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fc3a 	bl	800175c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e232      	b.n	800335c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef6:	4b34      	ldr	r3, [pc, #208]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b31      	ldr	r3, [pc, #196]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	061b      	lsls	r3, r3, #24
 8002f10:	492d      	ldr	r1, [pc, #180]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
 8002f16:	e01a      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f18:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fc1a 	bl	800175c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fc16 	bl	800175c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e20e      	b.n	800335c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f3e:	4b22      	ldr	r3, [pc, #136]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1e0>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d041      	beq.n	8002fde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f68:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe fbf3 	bl	800175c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7fe fbef 	bl	800175c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1e7      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ef      	beq.n	8002f7a <HAL_RCC_OscConfig+0x22e>
 8002f9a:	e020      	b.n	8002fde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa2:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fbd6 	bl	800175c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fbd2 	bl	800175c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d906      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1ca      	b.n	800335c <HAL_RCC_OscConfig+0x610>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ea      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80a6 	beq.w	8003138 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ff0:	4b84      	ldr	r3, [pc, #528]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x2b4>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x2b6>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b7f      	ldr	r3, [pc, #508]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300a:	4a7e      	ldr	r2, [pc, #504]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003010:	6593      	str	r3, [r2, #88]	@ 0x58
 8003012:	4b7c      	ldr	r3, [pc, #496]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4b79      	ldr	r3, [pc, #484]	@ (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302e:	4b76      	ldr	r3, [pc, #472]	@ (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	@ (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fb8f 	bl	800175c <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fe fb8b 	bl	800175c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e183      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003054:	4b6c      	ldr	r3, [pc, #432]	@ (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <HAL_RCC_OscConfig+0x32e>
 8003068:	4b66      	ldr	r3, [pc, #408]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	4a65      	ldr	r2, [pc, #404]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003078:	e024      	b.n	80030c4 <HAL_RCC_OscConfig+0x378>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b05      	cmp	r3, #5
 8003080:	d110      	bne.n	80030a4 <HAL_RCC_OscConfig+0x358>
 8003082:	4b60      	ldr	r3, [pc, #384]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003088:	4a5e      	ldr	r2, [pc, #376]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003092:	4b5c      	ldr	r3, [pc, #368]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003098:	4a5a      	ldr	r2, [pc, #360]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030a2:	e00f      	b.n	80030c4 <HAL_RCC_OscConfig+0x378>
 80030a4:	4b57      	ldr	r3, [pc, #348]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	4a56      	ldr	r2, [pc, #344]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030b4:	4b53      	ldr	r3, [pc, #332]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d016      	beq.n	80030fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe fb46 	bl	800175c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe fb42 	bl	800175c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e138      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ea:	4b46      	ldr	r3, [pc, #280]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ed      	beq.n	80030d4 <HAL_RCC_OscConfig+0x388>
 80030f8:	e015      	b.n	8003126 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe fb2f 	bl	800175c <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe fb2b 	bl	800175c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e121      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003118:	4b3a      	ldr	r3, [pc, #232]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ed      	bne.n	8003102 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b35      	ldr	r3, [pc, #212]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	4a34      	ldr	r2, [pc, #208]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d03c      	beq.n	80031be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01c      	beq.n	8003186 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800314c:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800314e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003152:	4a2c      	ldr	r2, [pc, #176]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fafe 	bl	800175c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003164:	f7fe fafa 	bl	800175c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e0f2      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003176:	4b23      	ldr	r3, [pc, #140]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ef      	beq.n	8003164 <HAL_RCC_OscConfig+0x418>
 8003184:	e01b      	b.n	80031be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003186:	4b1f      	ldr	r3, [pc, #124]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003188:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800318c:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003196:	f7fe fae1 	bl	800175c <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319e:	f7fe fadd 	bl	800175c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0d5      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ef      	bne.n	800319e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80c9 	beq.w	800335a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	f000 8083 	beq.w	80032dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d15e      	bne.n	800329c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a08      	ldr	r2, [pc, #32]	@ (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fe fab7 	bl	800175c <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f0:	e00c      	b.n	800320c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fab3 	bl	800175c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d905      	bls.n	800320c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0ab      	b.n	800335c <HAL_RCC_OscConfig+0x610>
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	4b55      	ldr	r3, [pc, #340]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ec      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003218:	4b52      	ldr	r3, [pc, #328]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4b52      	ldr	r3, [pc, #328]	@ (8003368 <HAL_RCC_OscConfig+0x61c>)
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6a11      	ldr	r1, [r2, #32]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003228:	3a01      	subs	r2, #1
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003232:	0212      	lsls	r2, r2, #8
 8003234:	4311      	orrs	r1, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800323a:	0852      	lsrs	r2, r2, #1
 800323c:	3a01      	subs	r2, #1
 800323e:	0552      	lsls	r2, r2, #21
 8003240:	4311      	orrs	r1, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0652      	lsls	r2, r2, #25
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003252:	06d2      	lsls	r2, r2, #27
 8003254:	430a      	orrs	r2, r1
 8003256:	4943      	ldr	r1, [pc, #268]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 8003258:	4313      	orrs	r3, r2
 800325a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a40      	ldr	r2, [pc, #256]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 8003262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003268:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a3d      	ldr	r2, [pc, #244]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003272:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe fa72 	bl	800175c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fa6e 	bl	800175c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e066      	b.n	800335c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328e:	4b35      	ldr	r3, [pc, #212]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x530>
 800329a:	e05e      	b.n	800335a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329c:	4b31      	ldr	r3, [pc, #196]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 80032a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fa58 	bl	800175c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe fa54 	bl	800175c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04c      	b.n	800335c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c2:	4b28      	ldr	r3, [pc, #160]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032ce:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	4924      	ldr	r1, [pc, #144]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 80032d4:	4b25      	ldr	r3, [pc, #148]	@ (800336c <HAL_RCC_OscConfig+0x620>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	60cb      	str	r3, [r1, #12]
 80032da:	e03e      	b.n	800335a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e039      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <HAL_RCC_OscConfig+0x618>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0203 	and.w	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d12c      	bne.n	8003356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	3b01      	subs	r3, #1
 8003308:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d123      	bne.n	8003356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d11b      	bne.n	8003356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d113      	bne.n	8003356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	3b01      	subs	r3, #1
 800333c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d109      	bne.n	8003356 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	3b01      	subs	r3, #1
 8003350:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	019f800c 	.word	0x019f800c
 800336c:	feeefffc 	.word	0xfeeefffc

08003370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e11e      	b.n	80035c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b91      	ldr	r3, [pc, #580]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b8e      	ldr	r3, [pc, #568]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 020f 	bic.w	r2, r3, #15
 800339e:	498c      	ldr	r1, [pc, #560]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b8a      	ldr	r3, [pc, #552]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e106      	b.n	80035c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d073      	beq.n	80034ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d129      	bne.n	8003420 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033cc:	4b81      	ldr	r3, [pc, #516]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0f4      	b.n	80035c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033dc:	f000 f99e 	bl	800371c <RCC_GetSysClockFreqFromPLLSource>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4a7c      	ldr	r2, [pc, #496]	@ (80035d8 <HAL_RCC_ClockConfig+0x268>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d93f      	bls.n	800346a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033ea:	4b7a      	ldr	r3, [pc, #488]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d033      	beq.n	800346a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003406:	2b00      	cmp	r3, #0
 8003408:	d12f      	bne.n	800346a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800340a:	4b72      	ldr	r3, [pc, #456]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003412:	4a70      	ldr	r2, [pc, #448]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003418:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e024      	b.n	800346a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d107      	bne.n	8003438 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003428:	4b6a      	ldr	r3, [pc, #424]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0c6      	b.n	80035c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003438:	4b66      	ldr	r3, [pc, #408]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0be      	b.n	80035c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003448:	f000 f8ce 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 800344c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4a61      	ldr	r2, [pc, #388]	@ (80035d8 <HAL_RCC_ClockConfig+0x268>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d909      	bls.n	800346a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003456:	4b5f      	ldr	r3, [pc, #380]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800345e:	4a5d      	ldr	r2, [pc, #372]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003464:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b5a      	ldr	r3, [pc, #360]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4957      	ldr	r1, [pc, #348]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347c:	f7fe f96e 	bl	800175c <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fe f96a 	bl	800175c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e095      	b.n	80035c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b4e      	ldr	r3, [pc, #312]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c4:	4b43      	ldr	r3, [pc, #268]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a42      	ldr	r2, [pc, #264]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80034ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034dc:	4b3d      	ldr	r3, [pc, #244]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034e4:	4a3b      	ldr	r2, [pc, #236]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80034e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b39      	ldr	r3, [pc, #228]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4936      	ldr	r1, [pc, #216]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
 80034fe:	e008      	b.n	8003512 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d105      	bne.n	8003512 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003506:	4b33      	ldr	r3, [pc, #204]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 800350c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003510:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003512:	4b2f      	ldr	r3, [pc, #188]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d21d      	bcs.n	800355c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003520:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 020f 	bic.w	r2, r3, #15
 8003528:	4929      	ldr	r1, [pc, #164]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003530:	f7fe f914 	bl	800175c <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fe f910 	bl	800175c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e03b      	b.n	80035c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b20      	ldr	r3, [pc, #128]	@ (80035d0 <HAL_RCC_ClockConfig+0x260>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d1ed      	bne.n	8003538 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4917      	ldr	r1, [pc, #92]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490f      	ldr	r1, [pc, #60]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800359a:	f000 f825 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <HAL_RCC_ClockConfig+0x264>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490c      	ldr	r1, [pc, #48]	@ (80035dc <HAL_RCC_ClockConfig+0x26c>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <HAL_RCC_ClockConfig+0x270>)
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035ba:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <HAL_RCC_ClockConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe f880 	bl	80016c4 <HAL_InitTick>
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40021000 	.word	0x40021000
 80035d8:	04c4b400 	.word	0x04c4b400
 80035dc:	08007464 	.word	0x08007464
 80035e0:	20000000 	.word	0x20000000
 80035e4:	20000004 	.word	0x20000004

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035ee:	4b2c      	ldr	r3, [pc, #176]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d102      	bne.n	8003600 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035fa:	4b2a      	ldr	r3, [pc, #168]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e047      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003600:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d102      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800360c:	4b26      	ldr	r3, [pc, #152]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	e03e      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003612:	4b23      	ldr	r3, [pc, #140]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d136      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003628:	4b1d      	ldr	r3, [pc, #116]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3301      	adds	r3, #1
 8003634:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d10c      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800363c:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003646:	68d2      	ldr	r2, [r2, #12]
 8003648:	0a12      	lsrs	r2, r2, #8
 800364a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
      break;
 8003654:	e00c      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003656:	4a13      	ldr	r2, [pc, #76]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	4a10      	ldr	r2, [pc, #64]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003660:	68d2      	ldr	r2, [r2, #12]
 8003662:	0a12      	lsrs	r2, r2, #8
 8003664:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
      break;
 800366e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0e5b      	lsrs	r3, r3, #25
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	3301      	adds	r3, #1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e001      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003690:	693b      	ldr	r3, [r7, #16]
}
 8003692:	4618      	mov	r0, r3
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	016e3600 	.word	0x016e3600

080036ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000

080036c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036c8:	f7ff fff0 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4904      	ldr	r1, [pc, #16]	@ (80036ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08007474 	.word	0x08007474

080036f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036f4:	f7ff ffda 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	0adb      	lsrs	r3, r3, #11
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4904      	ldr	r1, [pc, #16]	@ (8003718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	08007474 	.word	0x08007474

0800371c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003722:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d10c      	bne.n	800375a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003740:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	4a14      	ldr	r2, [pc, #80]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800374a:	68d2      	ldr	r2, [r2, #12]
 800374c:	0a12      	lsrs	r2, r2, #8
 800374e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	617b      	str	r3, [r7, #20]
    break;
 8003758:	e00c      	b.n	8003774 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800375a:	4a12      	ldr	r2, [pc, #72]	@ (80037a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	4a0e      	ldr	r2, [pc, #56]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	0a12      	lsrs	r2, r2, #8
 8003768:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
    break;
 8003772:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003774:	4b09      	ldr	r3, [pc, #36]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0e5b      	lsrs	r3, r3, #25
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	3301      	adds	r3, #1
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800378e:	687b      	ldr	r3, [r7, #4]
}
 8003790:	4618      	mov	r0, r3
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000
 80037a0:	016e3600 	.word	0x016e3600
 80037a4:	00f42400 	.word	0x00f42400

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b4:	2300      	movs	r3, #0
 80037b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8098 	beq.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ca:	4b43      	ldr	r3, [pc, #268]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4b40      	ldr	r3, [pc, #256]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037da:	4a3f      	ldr	r2, [pc, #252]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80037e2:	4b3d      	ldr	r3, [pc, #244]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f2:	4b3a      	ldr	r3, [pc, #232]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a39      	ldr	r2, [pc, #228]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fe:	f7fd ffad 	bl	800175c <HAL_GetTick>
 8003802:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003804:	e009      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fd ffa9 	bl	800175c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d902      	bls.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	74fb      	strb	r3, [r7, #19]
        break;
 8003818:	e005      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800381a:	4b30      	ldr	r3, [pc, #192]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ef      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d159      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800382c:	4b2a      	ldr	r3, [pc, #168]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003836:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	d019      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003848:	4b23      	ldr	r3, [pc, #140]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003854:	4b20      	ldr	r3, [pc, #128]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385a:	4a1f      	ldr	r2, [pc, #124]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003864:	4b1c      	ldr	r3, [pc, #112]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	4a1b      	ldr	r2, [pc, #108]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003874:	4a18      	ldr	r2, [pc, #96]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd ff69 	bl	800175c <HAL_GetTick>
 800388a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388c:	e00b      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd ff65 	bl	800175c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d902      	bls.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	74fb      	strb	r3, [r7, #19]
            break;
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a6:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ec      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ba:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	4903      	ldr	r1, [pc, #12]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038d0:	e008      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	74bb      	strb	r3, [r7, #18]
 80038d6:	e005      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e4:	7c7b      	ldrb	r3, [r7, #17]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4ba6      	ldr	r3, [pc, #664]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	4aa5      	ldr	r2, [pc, #660]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003902:	4ba0      	ldr	r3, [pc, #640]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f023 0203 	bic.w	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	499c      	ldr	r1, [pc, #624]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003924:	4b97      	ldr	r3, [pc, #604]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	f023 020c 	bic.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4994      	ldr	r1, [pc, #592]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003946:	4b8f      	ldr	r3, [pc, #572]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	498b      	ldr	r1, [pc, #556]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003968:	4b86      	ldr	r3, [pc, #536]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	4983      	ldr	r1, [pc, #524]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800398a:	4b7e      	ldr	r3, [pc, #504]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003990:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	497a      	ldr	r1, [pc, #488]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ac:	4b75      	ldr	r3, [pc, #468]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	4972      	ldr	r1, [pc, #456]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4969      	ldr	r1, [pc, #420]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f0:	4b64      	ldr	r3, [pc, #400]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4961      	ldr	r1, [pc, #388]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a12:	4b5c      	ldr	r3, [pc, #368]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	4958      	ldr	r1, [pc, #352]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a34:	4b53      	ldr	r3, [pc, #332]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a42:	4950      	ldr	r1, [pc, #320]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a52:	d105      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a54:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a4a      	ldr	r2, [pc, #296]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a6c:	4b45      	ldr	r3, [pc, #276]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	4942      	ldr	r1, [pc, #264]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a3c      	ldr	r2, [pc, #240]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a96:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aa4:	4b37      	ldr	r3, [pc, #220]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	4934      	ldr	r1, [pc, #208]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ace:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003adc:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aea:	4926      	ldr	r1, [pc, #152]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003afa:	d105      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	4b21      	ldr	r3, [pc, #132]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a20      	ldr	r2, [pc, #128]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	4918      	ldr	r1, [pc, #96]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b32:	d105      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5a:	490a      	ldr	r1, [pc, #40]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e042      	b.n	8003c20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fd fc5b 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2224      	movs	r2, #36	@ 0x24
 8003bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 ff30 	bl	8004a38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fc61 	bl	80044a0 <UART_SetConfig>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e01b      	b.n	8003c20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 ffaf 	bl	8004b7c <UART_CheckIdleState>
 8003c1e:	4603      	mov	r3, r0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d17b      	bne.n	8003d3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_UART_Transmit+0x26>
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e074      	b.n	8003d3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c62:	f7fd fd7b 	bl	800175c <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d108      	bne.n	8003c94 <HAL_UART_Transmit+0x6c>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e003      	b.n	8003c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c9c:	e030      	b.n	8003d00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2180      	movs	r1, #128	@ 0x80
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f001 f811 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e03d      	b.n	8003d3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e007      	b.n	8003cee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1c8      	bne.n	8003c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2140      	movs	r1, #64	@ 0x40
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 ffda 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e006      	b.n	8003d3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	@ 0x28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d137      	bne.n	8003dcc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_UART_Receive_IT+0x24>
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e030      	b.n	8003dce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a18      	ldr	r2, [pc, #96]	@ (8003dd8 <HAL_UART_Receive_IT+0x94>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01f      	beq.n	8003dbc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d018      	beq.n	8003dbc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	613b      	str	r3, [r7, #16]
   return(result);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	69f9      	ldr	r1, [r7, #28]
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e6      	bne.n	8003d8a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fff2 	bl	8004dac <UART_Start_Receive_IT>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	e000      	b.n	8003dce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3728      	adds	r7, #40	@ 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40008000 	.word	0x40008000

08003ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b0ba      	sub	sp, #232	@ 0xe8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003e06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11b      	bne.n	8003e50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8300 	beq.w	8004446 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      }
      return;
 8003e4e:	e2fa      	b.n	8004446 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8123 	beq.w	80040a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004094 <HAL_UART_IRQHandler+0x2b8>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	@ (8004098 <HAL_UART_IRQHandler+0x2bc>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8116 	beq.w	80040a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d011      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xc8>
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xf8>
 8003eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <HAL_UART_IRQHandler+0x128>
 8003ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	f043 0202 	orr.w	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d017      	beq.n	8003f40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003f20:	4b5c      	ldr	r3, [pc, #368]	@ (8004094 <HAL_UART_IRQHandler+0x2b8>)
 8003f22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f36:	f043 0208 	orr.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <HAL_UART_IRQHandler+0x196>
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00c      	beq.n	8003f72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8266 	beq.w	800444a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d013      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d005      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d054      	beq.n	8004080 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f001 f80a 	bl	8004ff0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	d146      	bne.n	8004078 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004016:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800401a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800402e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1d9      	bne.n	8003fea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004046:	4a15      	ldr	r2, [pc, #84]	@ (800409c <HAL_UART_IRQHandler+0x2c0>)
 8004048:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fcf7 	bl	8001a44 <HAL_DMA_Abort_IT>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d019      	beq.n	8004090 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800406a:	4610      	mov	r0, r2
 800406c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406e:	e00f      	b.n	8004090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f9ff 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004076:	e00b      	b.n	8004090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9fb 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407e:	e007      	b.n	8004090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f9f7 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800408e:	e1dc      	b.n	800444a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	bf00      	nop
    return;
 8004092:	e1da      	b.n	800444a <HAL_UART_IRQHandler+0x66e>
 8004094:	10000001 	.word	0x10000001
 8004098:	04000120 	.word	0x04000120
 800409c:	080050bd 	.word	0x080050bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	f040 8170 	bne.w	800438a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8169 	beq.w	800438a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8162 	beq.w	800438a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2210      	movs	r2, #16
 80040cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	f040 80d8 	bne.w	800428e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80af 	beq.w	8004254 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004100:	429a      	cmp	r2, r3
 8004102:	f080 80a7 	bcs.w	8004254 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800410c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 8087 	bne.w	8004232 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800413c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800414e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004152:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800415a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1da      	bne.n	8004124 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3308      	adds	r3, #8
 8004174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800417e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800419a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e1      	bne.n	800416e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3308      	adds	r3, #8
 80041ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e3      	bne.n	80041aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004200:	f023 0310 	bic.w	r3, r3, #16
 8004204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004212:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004214:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e4      	bne.n	80041f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800422c:	4618      	mov	r0, r3
 800422e:	f7fd fbb0 	bl	8001992 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004244:	b29b      	uxth	r3, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b29b      	uxth	r3, r3
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f91b 	bl	8004488 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004252:	e0fc      	b.n	800444e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800425a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800425e:	429a      	cmp	r2, r3
 8004260:	f040 80f5 	bne.w	800444e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b20      	cmp	r3, #32
 8004274:	f040 80eb 	bne.w	800444e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8fe 	bl	8004488 <HAL_UARTEx_RxEventCallback>
      return;
 800428c:	e0df      	b.n	800444e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800429a:	b29b      	uxth	r3, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80d1 	beq.w	8004452 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80042b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80cc 	beq.w	8004452 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e4      	bne.n	80042ba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3308      	adds	r3, #8
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004318:	633a      	str	r2, [r7, #48]	@ 0x30
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800431e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e1      	bne.n	80042f0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	60fb      	str	r3, [r7, #12]
   return(result);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f023 0310 	bic.w	r3, r3, #16
 8004354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	617b      	str	r3, [r7, #20]
   return(result);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e4      	bne.n	8004340 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800437c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f880 	bl	8004488 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004388:	e063      	b.n	8004452 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <HAL_UART_IRQHandler+0x5d8>
 8004396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80043aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f001 fbe3 	bl	8005b78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043b2:	e051      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80043b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d014      	beq.n	80043ea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80043c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80043cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03a      	beq.n	8004456 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
    }
    return;
 80043e8:	e035      	b.n	8004456 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_UART_IRQHandler+0x62e>
 80043f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fe6c 	bl	80050e0 <UART_EndTransmit_IT>
    return;
 8004408:	e026      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800440a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_UART_IRQHandler+0x64e>
 8004416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800441a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f001 fbbc 	bl	8005ba0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004428:	e016      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <HAL_UART_IRQHandler+0x67c>
 8004436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443a:	2b00      	cmp	r3, #0
 800443c:	da0c      	bge.n	8004458 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f001 fba4 	bl	8005b8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004444:	e008      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
      return;
 8004446:	bf00      	nop
 8004448:	e006      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
    return;
 800444a:	bf00      	nop
 800444c:	e004      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
      return;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
      return;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <HAL_UART_IRQHandler+0x67c>
    return;
 8004456:	bf00      	nop
  }
}
 8004458:	37e8      	adds	r7, #232	@ 0xe8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b08c      	sub	sp, #48	@ 0x30
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	431a      	orrs	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4bab      	ldr	r3, [pc, #684]	@ (800477c <UART_SetConfig+0x2dc>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d8:	430b      	orrs	r3, r1
 80044da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4aa0      	ldr	r2, [pc, #640]	@ (8004780 <UART_SetConfig+0x2e0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004508:	4313      	orrs	r3, r2
 800450a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004516:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004520:	430b      	orrs	r3, r1
 8004522:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	f023 010f 	bic.w	r1, r3, #15
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a91      	ldr	r2, [pc, #580]	@ (8004784 <UART_SetConfig+0x2e4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d125      	bne.n	8004590 <UART_SetConfig+0xf0>
 8004544:	4b90      	ldr	r3, [pc, #576]	@ (8004788 <UART_SetConfig+0x2e8>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b03      	cmp	r3, #3
 8004550:	d81a      	bhi.n	8004588 <UART_SetConfig+0xe8>
 8004552:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <UART_SetConfig+0xb8>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	08004569 	.word	0x08004569
 800455c:	08004579 	.word	0x08004579
 8004560:	08004571 	.word	0x08004571
 8004564:	08004581 	.word	0x08004581
 8004568:	2301      	movs	r3, #1
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800456e:	e0d6      	b.n	800471e <UART_SetConfig+0x27e>
 8004570:	2302      	movs	r3, #2
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e0d2      	b.n	800471e <UART_SetConfig+0x27e>
 8004578:	2304      	movs	r3, #4
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457e:	e0ce      	b.n	800471e <UART_SetConfig+0x27e>
 8004580:	2308      	movs	r3, #8
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e0ca      	b.n	800471e <UART_SetConfig+0x27e>
 8004588:	2310      	movs	r3, #16
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e0c6      	b.n	800471e <UART_SetConfig+0x27e>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7d      	ldr	r2, [pc, #500]	@ (800478c <UART_SetConfig+0x2ec>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d138      	bne.n	800460c <UART_SetConfig+0x16c>
 800459a:	4b7b      	ldr	r3, [pc, #492]	@ (8004788 <UART_SetConfig+0x2e8>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d82d      	bhi.n	8004604 <UART_SetConfig+0x164>
 80045a8:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <UART_SetConfig+0x110>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	08004605 	.word	0x08004605
 80045b8:	08004605 	.word	0x08004605
 80045bc:	08004605 	.word	0x08004605
 80045c0:	080045f5 	.word	0x080045f5
 80045c4:	08004605 	.word	0x08004605
 80045c8:	08004605 	.word	0x08004605
 80045cc:	08004605 	.word	0x08004605
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	08004605 	.word	0x08004605
 80045d8:	08004605 	.word	0x08004605
 80045dc:	08004605 	.word	0x08004605
 80045e0:	080045fd 	.word	0x080045fd
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ea:	e098      	b.n	800471e <UART_SetConfig+0x27e>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f2:	e094      	b.n	800471e <UART_SetConfig+0x27e>
 80045f4:	2304      	movs	r3, #4
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	e090      	b.n	800471e <UART_SetConfig+0x27e>
 80045fc:	2308      	movs	r3, #8
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004602:	e08c      	b.n	800471e <UART_SetConfig+0x27e>
 8004604:	2310      	movs	r3, #16
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800460a:	e088      	b.n	800471e <UART_SetConfig+0x27e>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5f      	ldr	r2, [pc, #380]	@ (8004790 <UART_SetConfig+0x2f0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d125      	bne.n	8004662 <UART_SetConfig+0x1c2>
 8004616:	4b5c      	ldr	r3, [pc, #368]	@ (8004788 <UART_SetConfig+0x2e8>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004620:	2b30      	cmp	r3, #48	@ 0x30
 8004622:	d016      	beq.n	8004652 <UART_SetConfig+0x1b2>
 8004624:	2b30      	cmp	r3, #48	@ 0x30
 8004626:	d818      	bhi.n	800465a <UART_SetConfig+0x1ba>
 8004628:	2b20      	cmp	r3, #32
 800462a:	d00a      	beq.n	8004642 <UART_SetConfig+0x1a2>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d814      	bhi.n	800465a <UART_SetConfig+0x1ba>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <UART_SetConfig+0x19a>
 8004634:	2b10      	cmp	r3, #16
 8004636:	d008      	beq.n	800464a <UART_SetConfig+0x1aa>
 8004638:	e00f      	b.n	800465a <UART_SetConfig+0x1ba>
 800463a:	2300      	movs	r3, #0
 800463c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004640:	e06d      	b.n	800471e <UART_SetConfig+0x27e>
 8004642:	2302      	movs	r3, #2
 8004644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004648:	e069      	b.n	800471e <UART_SetConfig+0x27e>
 800464a:	2304      	movs	r3, #4
 800464c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004650:	e065      	b.n	800471e <UART_SetConfig+0x27e>
 8004652:	2308      	movs	r3, #8
 8004654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004658:	e061      	b.n	800471e <UART_SetConfig+0x27e>
 800465a:	2310      	movs	r3, #16
 800465c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004660:	e05d      	b.n	800471e <UART_SetConfig+0x27e>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a4b      	ldr	r2, [pc, #300]	@ (8004794 <UART_SetConfig+0x2f4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d125      	bne.n	80046b8 <UART_SetConfig+0x218>
 800466c:	4b46      	ldr	r3, [pc, #280]	@ (8004788 <UART_SetConfig+0x2e8>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004676:	2bc0      	cmp	r3, #192	@ 0xc0
 8004678:	d016      	beq.n	80046a8 <UART_SetConfig+0x208>
 800467a:	2bc0      	cmp	r3, #192	@ 0xc0
 800467c:	d818      	bhi.n	80046b0 <UART_SetConfig+0x210>
 800467e:	2b80      	cmp	r3, #128	@ 0x80
 8004680:	d00a      	beq.n	8004698 <UART_SetConfig+0x1f8>
 8004682:	2b80      	cmp	r3, #128	@ 0x80
 8004684:	d814      	bhi.n	80046b0 <UART_SetConfig+0x210>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <UART_SetConfig+0x1f0>
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d008      	beq.n	80046a0 <UART_SetConfig+0x200>
 800468e:	e00f      	b.n	80046b0 <UART_SetConfig+0x210>
 8004690:	2300      	movs	r3, #0
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004696:	e042      	b.n	800471e <UART_SetConfig+0x27e>
 8004698:	2302      	movs	r3, #2
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800469e:	e03e      	b.n	800471e <UART_SetConfig+0x27e>
 80046a0:	2304      	movs	r3, #4
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046a6:	e03a      	b.n	800471e <UART_SetConfig+0x27e>
 80046a8:	2308      	movs	r3, #8
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ae:	e036      	b.n	800471e <UART_SetConfig+0x27e>
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b6:	e032      	b.n	800471e <UART_SetConfig+0x27e>
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a30      	ldr	r2, [pc, #192]	@ (8004780 <UART_SetConfig+0x2e0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d12a      	bne.n	8004718 <UART_SetConfig+0x278>
 80046c2:	4b31      	ldr	r3, [pc, #196]	@ (8004788 <UART_SetConfig+0x2e8>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046d0:	d01a      	beq.n	8004708 <UART_SetConfig+0x268>
 80046d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046d6:	d81b      	bhi.n	8004710 <UART_SetConfig+0x270>
 80046d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046dc:	d00c      	beq.n	80046f8 <UART_SetConfig+0x258>
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e2:	d815      	bhi.n	8004710 <UART_SetConfig+0x270>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <UART_SetConfig+0x250>
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ec:	d008      	beq.n	8004700 <UART_SetConfig+0x260>
 80046ee:	e00f      	b.n	8004710 <UART_SetConfig+0x270>
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f6:	e012      	b.n	800471e <UART_SetConfig+0x27e>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046fe:	e00e      	b.n	800471e <UART_SetConfig+0x27e>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004706:	e00a      	b.n	800471e <UART_SetConfig+0x27e>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800470e:	e006      	b.n	800471e <UART_SetConfig+0x27e>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004716:	e002      	b.n	800471e <UART_SetConfig+0x27e>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a17      	ldr	r2, [pc, #92]	@ (8004780 <UART_SetConfig+0x2e0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	f040 80a8 	bne.w	800487a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800472a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800472e:	2b08      	cmp	r3, #8
 8004730:	d834      	bhi.n	800479c <UART_SetConfig+0x2fc>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <UART_SetConfig+0x298>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800475d 	.word	0x0800475d
 800473c:	0800479d 	.word	0x0800479d
 8004740:	08004765 	.word	0x08004765
 8004744:	0800479d 	.word	0x0800479d
 8004748:	0800476b 	.word	0x0800476b
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800479d 	.word	0x0800479d
 8004754:	0800479d 	.word	0x0800479d
 8004758:	08004773 	.word	0x08004773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475c:	f7fe ffb2 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004762:	e021      	b.n	80047a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004764:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <UART_SetConfig+0x2f8>)
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004768:	e01e      	b.n	80047a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476a:	f7fe ff3d 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 800476e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004770:	e01a      	b.n	80047a8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004778:	e016      	b.n	80047a8 <UART_SetConfig+0x308>
 800477a:	bf00      	nop
 800477c:	cfff69f3 	.word	0xcfff69f3
 8004780:	40008000 	.word	0x40008000
 8004784:	40013800 	.word	0x40013800
 8004788:	40021000 	.word	0x40021000
 800478c:	40004400 	.word	0x40004400
 8004790:	40004800 	.word	0x40004800
 8004794:	40004c00 	.word	0x40004c00
 8004798:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 812a 	beq.w	8004a04 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	4a9e      	ldr	r2, [pc, #632]	@ (8004a30 <UART_SetConfig+0x590>)
 80047b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ba:	461a      	mov	r2, r3
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4413      	add	r3, r2
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d305      	bcc.n	80047e0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d903      	bls.n	80047e8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047e6:	e10d      	b.n	8004a04 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	2200      	movs	r2, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	60fa      	str	r2, [r7, #12]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	4a8e      	ldr	r2, [pc, #568]	@ (8004a30 <UART_SetConfig+0x590>)
 80047f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2200      	movs	r2, #0
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004806:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800480a:	f7fb fd71 	bl	80002f0 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	020b      	lsls	r3, r1, #8
 8004820:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004824:	0202      	lsls	r2, r0, #8
 8004826:	6979      	ldr	r1, [r7, #20]
 8004828:	6849      	ldr	r1, [r1, #4]
 800482a:	0849      	lsrs	r1, r1, #1
 800482c:	2000      	movs	r0, #0
 800482e:	460c      	mov	r4, r1
 8004830:	4605      	mov	r5, r0
 8004832:	eb12 0804 	adds.w	r8, r2, r4
 8004836:	eb43 0905 	adc.w	r9, r3, r5
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	469a      	mov	sl, r3
 8004842:	4693      	mov	fp, r2
 8004844:	4652      	mov	r2, sl
 8004846:	465b      	mov	r3, fp
 8004848:	4640      	mov	r0, r8
 800484a:	4649      	mov	r1, r9
 800484c:	f7fb fd50 	bl	80002f0 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485e:	d308      	bcc.n	8004872 <UART_SetConfig+0x3d2>
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004866:	d204      	bcs.n	8004872 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6a3a      	ldr	r2, [r7, #32]
 800486e:	60da      	str	r2, [r3, #12]
 8004870:	e0c8      	b.n	8004a04 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004878:	e0c4      	b.n	8004a04 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004882:	d167      	bne.n	8004954 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004884:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004888:	2b08      	cmp	r3, #8
 800488a:	d828      	bhi.n	80048de <UART_SetConfig+0x43e>
 800488c:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <UART_SetConfig+0x3f4>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c9 	.word	0x080048c9
 80048a0:	080048df 	.word	0x080048df
 80048a4:	080048cf 	.word	0x080048cf
 80048a8:	080048df 	.word	0x080048df
 80048ac:	080048df 	.word	0x080048df
 80048b0:	080048df 	.word	0x080048df
 80048b4:	080048d7 	.word	0x080048d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b8:	f7fe ff04 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 80048bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048be:	e014      	b.n	80048ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c0:	f7fe ff16 	bl	80036f0 <HAL_RCC_GetPCLK2Freq>
 80048c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048c6:	e010      	b.n	80048ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a34 <UART_SetConfig+0x594>)
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048cc:	e00d      	b.n	80048ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ce:	f7fe fe8b 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80048d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048d4:	e009      	b.n	80048ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048dc:	e005      	b.n	80048ea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8089 	beq.w	8004a04 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004a30 <UART_SetConfig+0x590>)
 80048f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048fc:	461a      	mov	r2, r3
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	fbb3 f3f2 	udiv	r3, r3, r2
 8004904:	005a      	lsls	r2, r3, #1
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	441a      	add	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	d916      	bls.n	800494c <UART_SetConfig+0x4ac>
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004924:	d212      	bcs.n	800494c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f023 030f 	bic.w	r3, r3, #15
 800492e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	085b      	lsrs	r3, r3, #1
 8004934:	b29b      	uxth	r3, r3
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	b29a      	uxth	r2, r3
 800493c:	8bfb      	ldrh	r3, [r7, #30]
 800493e:	4313      	orrs	r3, r2
 8004940:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	8bfa      	ldrh	r2, [r7, #30]
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	e05b      	b.n	8004a04 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004952:	e057      	b.n	8004a04 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004954:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004958:	2b08      	cmp	r3, #8
 800495a:	d828      	bhi.n	80049ae <UART_SetConfig+0x50e>
 800495c:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <UART_SetConfig+0x4c4>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004989 	.word	0x08004989
 8004968:	08004991 	.word	0x08004991
 800496c:	08004999 	.word	0x08004999
 8004970:	080049af 	.word	0x080049af
 8004974:	0800499f 	.word	0x0800499f
 8004978:	080049af 	.word	0x080049af
 800497c:	080049af 	.word	0x080049af
 8004980:	080049af 	.word	0x080049af
 8004984:	080049a7 	.word	0x080049a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe fe9c 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800498e:	e014      	b.n	80049ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004990:	f7fe feae 	bl	80036f0 <HAL_RCC_GetPCLK2Freq>
 8004994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004996:	e010      	b.n	80049ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004998:	4b26      	ldr	r3, [pc, #152]	@ (8004a34 <UART_SetConfig+0x594>)
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800499c:	e00d      	b.n	80049ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499e:	f7fe fe23 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80049a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049a4:	e009      	b.n	80049ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049ac:	e005      	b.n	80049ba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049b8:	bf00      	nop
    }

    if (pclk != 0U)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d021      	beq.n	8004a04 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a30 <UART_SetConfig+0x590>)
 80049c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ca:	461a      	mov	r2, r3
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	441a      	add	r2, r3
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d909      	bls.n	80049fe <UART_SetConfig+0x55e>
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f0:	d205      	bcs.n	80049fe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60da      	str	r2, [r3, #12]
 80049fc:	e002      	b.n	8004a04 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a20:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3730      	adds	r7, #48	@ 0x30
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	0800748c 	.word	0x0800748c
 8004a34:	00f42400 	.word	0x00f42400

08004a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b36:	d10a      	bne.n	8004b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b098      	sub	sp, #96	@ 0x60
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b8c:	f7fc fde6 	bl	800175c <HAL_GetTick>
 8004b90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d12f      	bne.n	8004c00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f88e 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d022      	beq.n	8004c00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e6      	bne.n	8004bba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e063      	b.n	8004cc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d149      	bne.n	8004ca2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c16:	2200      	movs	r2, #0
 8004c18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f857 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d03c      	beq.n	8004ca2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	623b      	str	r3, [r7, #32]
   return(result);
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c7a:	61fa      	str	r2, [r7, #28]
 8004c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	69b9      	ldr	r1, [r7, #24]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	617b      	str	r3, [r7, #20]
   return(result);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e012      	b.n	8004cc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3758      	adds	r7, #88	@ 0x58
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	e04f      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d04b      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fc fd37 	bl	800175c <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e04e      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d037      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b80      	cmp	r3, #128	@ 0x80
 8004d16:	d034      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b40      	cmp	r3, #64	@ 0x40
 8004d1c:	d031      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d110      	bne.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2208      	movs	r2, #8
 8004d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f95b 	bl	8004ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e029      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5c:	d111      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f941 	bl	8004ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e00f      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d0a0      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b0a3      	sub	sp, #140	@ 0x8c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dde:	d10e      	bne.n	8004dfe <UART_Start_Receive_IT+0x52>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <UART_Start_Receive_IT+0x48>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004dee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004df2:	e02d      	b.n	8004e50 <UART_Start_Receive_IT+0xa4>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	22ff      	movs	r2, #255	@ 0xff
 8004df8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004dfc:	e028      	b.n	8004e50 <UART_Start_Receive_IT+0xa4>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10d      	bne.n	8004e22 <UART_Start_Receive_IT+0x76>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <UART_Start_Receive_IT+0x6c>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	22ff      	movs	r2, #255	@ 0xff
 8004e12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004e16:	e01b      	b.n	8004e50 <UART_Start_Receive_IT+0xa4>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	227f      	movs	r2, #127	@ 0x7f
 8004e1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004e20:	e016      	b.n	8004e50 <UART_Start_Receive_IT+0xa4>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e2a:	d10d      	bne.n	8004e48 <UART_Start_Receive_IT+0x9c>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <UART_Start_Receive_IT+0x92>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	227f      	movs	r2, #127	@ 0x7f
 8004e38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004e3c:	e008      	b.n	8004e50 <UART_Start_Receive_IT+0xa4>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	223f      	movs	r2, #63	@ 0x3f
 8004e42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004e46:	e003      	b.n	8004e50 <UART_Start_Receive_IT+0xa4>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2222      	movs	r2, #34	@ 0x22
 8004e5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3308      	adds	r3, #8
 8004e66:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004e70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004e84:	673a      	str	r2, [r7, #112]	@ 0x70
 8004e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004e8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e3      	bne.n	8004e60 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea0:	d14f      	bne.n	8004f42 <UART_Start_Receive_IT+0x196>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004ea8:	88fa      	ldrh	r2, [r7, #6]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d349      	bcc.n	8004f42 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb6:	d107      	bne.n	8004ec8 <UART_Start_Receive_IT+0x11c>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a47      	ldr	r2, [pc, #284]	@ (8004fe0 <UART_Start_Receive_IT+0x234>)
 8004ec4:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ec6:	e002      	b.n	8004ece <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a46      	ldr	r2, [pc, #280]	@ (8004fe4 <UART_Start_Receive_IT+0x238>)
 8004ecc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01a      	beq.n	8004f0c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004efa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004efe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e4      	bne.n	8004ed6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f2c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f2e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e5      	bne.n	8004f0c <UART_Start_Receive_IT+0x160>
 8004f40:	e046      	b.n	8004fd0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4a:	d107      	bne.n	8004f5c <UART_Start_Receive_IT+0x1b0>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d103      	bne.n	8004f5c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a24      	ldr	r2, [pc, #144]	@ (8004fe8 <UART_Start_Receive_IT+0x23c>)
 8004f58:	675a      	str	r2, [r3, #116]	@ 0x74
 8004f5a:	e002      	b.n	8004f62 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a23      	ldr	r2, [pc, #140]	@ (8004fec <UART_Start_Receive_IT+0x240>)
 8004f60:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004f7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_Start_Receive_IT+0x1be>
 8004f9c:	e018      	b.n	8004fd0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	613b      	str	r3, [r7, #16]
   return(result);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f043 0320 	orr.w	r3, r3, #32
 8004fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69f9      	ldr	r1, [r7, #28]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	378c      	adds	r7, #140	@ 0x8c
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	0800580d 	.word	0x0800580d
 8004fe4:	080054a9 	.word	0x080054a9
 8004fe8:	080052f1 	.word	0x080052f1
 8004fec:	08005139 	.word	0x08005139

08004ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b095      	sub	sp, #84	@ 0x54
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005016:	643b      	str	r3, [r7, #64]	@ 0x40
 8005018:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800501c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e6      	bne.n	8004ff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	61fb      	str	r3, [r7, #28]
   return(result);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800504e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e3      	bne.n	800502a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005066:	2b01      	cmp	r3, #1
 8005068:	d118      	bne.n	800509c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	60bb      	str	r3, [r7, #8]
   return(result);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f023 0310 	bic.w	r3, r3, #16
 800507e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	613b      	str	r3, [r7, #16]
   return(result);
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050b0:	bf00      	nop
 80050b2:	3754      	adds	r7, #84	@ 0x54
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff f9ce 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	613b      	str	r3, [r7, #16]
   return(result);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff f999 	bl	8004460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800512e:	bf00      	nop
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b09c      	sub	sp, #112	@ 0x70
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005146:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005150:	2b22      	cmp	r3, #34	@ 0x22
 8005152:	f040 80be 	bne.w	80052d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005164:	b2d9      	uxtb	r1, r3
 8005166:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800516a:	b2da      	uxtb	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005170:	400a      	ands	r2, r1
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	f040 80a1 	bne.w	80052e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e6      	bne.n	80051a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80051f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e5      	bne.n	80051d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a33      	ldr	r2, [pc, #204]	@ (80052ec <UART_RxISR_8BIT+0x1b4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01f      	beq.n	8005264 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	623b      	str	r3, [r7, #32]
   return(result);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005246:	663b      	str	r3, [r7, #96]	@ 0x60
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005250:	633b      	str	r3, [r7, #48]	@ 0x30
 8005252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e6      	bne.n	8005232 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d12e      	bne.n	80052ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0310 	bic.w	r3, r3, #16
 8005286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	69b9      	ldr	r1, [r7, #24]
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	617b      	str	r3, [r7, #20]
   return(result);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e6      	bne.n	8005272 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d103      	bne.n	80052ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2210      	movs	r2, #16
 80052b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff f8e0 	bl	8004488 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052c8:	e00b      	b.n	80052e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb fb6e 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 80052d0:	e007      	b.n	80052e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0208 	orr.w	r2, r2, #8
 80052e0:	619a      	str	r2, [r3, #24]
}
 80052e2:	bf00      	nop
 80052e4:	3770      	adds	r7, #112	@ 0x70
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40008000 	.word	0x40008000

080052f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b09c      	sub	sp, #112	@ 0x70
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80052fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005308:	2b22      	cmp	r3, #34	@ 0x22
 800530a:	f040 80be 	bne.w	800548a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800531e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005322:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005326:	4013      	ands	r3, r2
 8005328:	b29a      	uxth	r2, r3
 800532a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800532c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 80a1 	bne.w	800549a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800536c:	667b      	str	r3, [r7, #100]	@ 0x64
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005376:	657b      	str	r3, [r7, #84]	@ 0x54
 8005378:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800537c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e6      	bne.n	8005358 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80053ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a33      	ldr	r2, [pc, #204]	@ (80054a4 <UART_RxISR_16BIT+0x1b4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d01f      	beq.n	800541c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d018      	beq.n	800541c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800540a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800540e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e6      	bne.n	80053ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d12e      	bne.n	8005482 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	60bb      	str	r3, [r7, #8]
   return(result);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f023 0310 	bic.w	r3, r3, #16
 800543e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	613b      	str	r3, [r7, #16]
   return(result);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b10      	cmp	r3, #16
 8005468:	d103      	bne.n	8005472 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2210      	movs	r2, #16
 8005470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff f804 	bl	8004488 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005480:	e00b      	b.n	800549a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fa92 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 8005488:	e007      	b.n	800549a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0208 	orr.w	r2, r2, #8
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	3770      	adds	r7, #112	@ 0x70
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40008000 	.word	0x40008000

080054a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0ac      	sub	sp, #176	@ 0xb0
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80054b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054de:	2b22      	cmp	r3, #34	@ 0x22
 80054e0:	f040 8183 	bne.w	80057ea <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80054ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054ee:	e126      	b.n	800573e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80054fe:	b2d9      	uxtb	r1, r3
 8005500:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005504:	b2da      	uxtb	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	400a      	ands	r2, r1
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b00      	cmp	r3, #0
 8005540:	d053      	beq.n	80055ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d011      	beq.n	8005572 <UART_RxISR_8BIT_FIFOEN+0xca>
 800554e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2201      	movs	r2, #1
 8005560:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d011      	beq.n	80055a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800557e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2202      	movs	r2, #2
 8005590:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005598:	f043 0204 	orr.w	r2, r3, #4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d011      	beq.n	80055d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80055ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2204      	movs	r2, #4
 80055c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c8:	f043 0202 	orr.w	r2, r3, #2
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fe ff49 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 80a3 	bne.w	800573e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800560c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800561a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800561c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005620:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e4      	bne.n	80055f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800563e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005656:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005658:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800565c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005664:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e1      	bne.n	800562e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a60      	ldr	r2, [pc, #384]	@ (8005804 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d021      	beq.n	80056cc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01a      	beq.n	80056cc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80056b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80056c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e4      	bne.n	8005696 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d130      	bne.n	8005736 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80056fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e4      	bne.n	80056da <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b10      	cmp	r3, #16
 800571c:	d103      	bne.n	8005726 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2210      	movs	r2, #16
 8005724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fe feaa 	bl	8004488 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005734:	e00e      	b.n	8005754 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fb f938 	bl	80009ac <HAL_UART_RxCpltCallback>
        break;
 800573c:	e00a      	b.n	8005754 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800573e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005742:	2b00      	cmp	r3, #0
 8005744:	d006      	beq.n	8005754 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8005746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	f47f aece 	bne.w	80054f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800575a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800575e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005762:	2b00      	cmp	r3, #0
 8005764:	d049      	beq.n	80057fa <UART_RxISR_8BIT_FIFOEN+0x352>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800576c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005770:	429a      	cmp	r2, r3
 8005772:	d242      	bcs.n	80057fa <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	61fb      	str	r3, [r7, #28]
   return(result);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800578a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e3      	bne.n	8005774 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a16      	ldr	r2, [pc, #88]	@ (8005808 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80057b0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f043 0320 	orr.w	r3, r3, #32
 80057c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6979      	ldr	r1, [r7, #20]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	613b      	str	r3, [r7, #16]
   return(result);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e4      	bne.n	80057b2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057e8:	e007      	b.n	80057fa <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0208 	orr.w	r2, r2, #8
 80057f8:	619a      	str	r2, [r3, #24]
}
 80057fa:	bf00      	nop
 80057fc:	37b0      	adds	r7, #176	@ 0xb0
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40008000 	.word	0x40008000
 8005808:	08005139 	.word	0x08005139

0800580c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b0ae      	sub	sp, #184	@ 0xb8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800581a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005842:	2b22      	cmp	r3, #34	@ 0x22
 8005844:	f040 8187 	bne.w	8005b56 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800584e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005852:	e12a      	b.n	8005aaa <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005866:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800586a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800586e:	4013      	ands	r3, r2
 8005870:	b29a      	uxth	r2, r3
 8005872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005876:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800589e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d053      	beq.n	8005952 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d011      	beq.n	80058da <UART_RxISR_16BIT_FIFOEN+0xce>
 80058b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2201      	movs	r2, #1
 80058c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d0:	f043 0201 	orr.w	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d011      	beq.n	800590a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80058e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2202      	movs	r2, #2
 80058f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800590a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2204      	movs	r2, #4
 8005928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005930:	f043 0202 	orr.w	r2, r3, #2
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005940:	2b00      	cmp	r3, #0
 8005942:	d006      	beq.n	8005952 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fe fd95 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 80a5 	bne.w	8005aaa <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800596e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005982:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005986:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800598a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e2      	bne.n	8005960 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3308      	adds	r3, #8
 80059be:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80059c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e1      	bne.n	800599a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a60      	ldr	r2, [pc, #384]	@ (8005b70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d021      	beq.n	8005a38 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01a      	beq.n	8005a38 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e4      	bne.n	8005a02 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d130      	bne.n	8005aa2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a56:	f023 0310 	bic.w	r3, r3, #16
 8005a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e4      	bne.n	8005a46 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d103      	bne.n	8005a92 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fe fcf4 	bl	8004488 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005aa0:	e00e      	b.n	8005ac0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fa ff82 	bl	80009ac <HAL_UART_RxCpltCallback>
        break;
 8005aa8:	e00a      	b.n	8005ac0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005aaa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8005ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f47f aeca 	bne.w	8005854 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ac6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005aca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d049      	beq.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005ad8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d242      	bcs.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	623b      	str	r3, [r7, #32]
   return(result);
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005b04:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e3      	bne.n	8005ae0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a16      	ldr	r2, [pc, #88]	@ (8005b74 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005b1c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f043 0320 	orr.w	r3, r3, #32
 8005b32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	69b9      	ldr	r1, [r7, #24]
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e4      	bne.n	8005b1e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b54:	e007      	b.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0208 	orr.w	r2, r2, #8
 8005b64:	619a      	str	r2, [r3, #24]
}
 8005b66:	bf00      	nop
 8005b68:	37b8      	adds	r7, #184	@ 0xb8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40008000 	.word	0x40008000
 8005b74:	080052f1 	.word	0x080052f1

08005b78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_UARTEx_EnableFifoMode+0x16>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e02b      	b.n	8005c22 <HAL_UARTEx_EnableFifoMode+0x6e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2224      	movs	r2, #36	@ 0x24
 8005bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005c00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f88a 	bl	8005d24 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e02d      	b.n	8005c9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2224      	movs	r2, #36	@ 0x24
 8005c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f850 	bl	8005d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e02d      	b.n	8005d1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	@ 0x24
 8005cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f812 	bl	8005d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d108      	bne.n	8005d46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d44:	e031      	b.n	8005daa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d46:	2308      	movs	r3, #8
 8005d48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	0e5b      	lsrs	r3, r3, #25
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	0f5b      	lsrs	r3, r3, #29
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	7b3a      	ldrb	r2, [r7, #12]
 8005d72:	4911      	ldr	r1, [pc, #68]	@ (8005db8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d74:	5c8a      	ldrb	r2, [r1, r2]
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d7a:	7b3a      	ldrb	r2, [r7, #12]
 8005d7c:	490f      	ldr	r1, [pc, #60]	@ (8005dbc <UARTEx_SetNbDataToProcess+0x98>)
 8005d7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	7b7a      	ldrb	r2, [r7, #13]
 8005d90:	4909      	ldr	r1, [pc, #36]	@ (8005db8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d92:	5c8a      	ldrb	r2, [r1, r2]
 8005d94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d98:	7b7a      	ldrb	r2, [r7, #13]
 8005d9a:	4908      	ldr	r1, [pc, #32]	@ (8005dbc <UARTEx_SetNbDataToProcess+0x98>)
 8005d9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	080074a4 	.word	0x080074a4
 8005dbc:	080074ac 	.word	0x080074ac

08005dc0 <malloc>:
 8005dc0:	4b02      	ldr	r3, [pc, #8]	@ (8005dcc <malloc+0xc>)
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	f000 b82d 	b.w	8005e24 <_malloc_r>
 8005dca:	bf00      	nop
 8005dcc:	2000000c 	.word	0x2000000c

08005dd0 <free>:
 8005dd0:	4b02      	ldr	r3, [pc, #8]	@ (8005ddc <free+0xc>)
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	f000 ba43 	b.w	8006260 <_free_r>
 8005dda:	bf00      	nop
 8005ddc:	2000000c 	.word	0x2000000c

08005de0 <sbrk_aligned>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4e0f      	ldr	r6, [pc, #60]	@ (8005e20 <sbrk_aligned+0x40>)
 8005de4:	460c      	mov	r4, r1
 8005de6:	6831      	ldr	r1, [r6, #0]
 8005de8:	4605      	mov	r5, r0
 8005dea:	b911      	cbnz	r1, 8005df2 <sbrk_aligned+0x12>
 8005dec:	f000 f9ee 	bl	80061cc <_sbrk_r>
 8005df0:	6030      	str	r0, [r6, #0]
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 f9e9 	bl	80061cc <_sbrk_r>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d103      	bne.n	8005e06 <sbrk_aligned+0x26>
 8005dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8005e02:	4620      	mov	r0, r4
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
 8005e06:	1cc4      	adds	r4, r0, #3
 8005e08:	f024 0403 	bic.w	r4, r4, #3
 8005e0c:	42a0      	cmp	r0, r4
 8005e0e:	d0f8      	beq.n	8005e02 <sbrk_aligned+0x22>
 8005e10:	1a21      	subs	r1, r4, r0
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f9da 	bl	80061cc <_sbrk_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d1f2      	bne.n	8005e02 <sbrk_aligned+0x22>
 8005e1c:	e7ef      	b.n	8005dfe <sbrk_aligned+0x1e>
 8005e1e:	bf00      	nop
 8005e20:	20000348 	.word	0x20000348

08005e24 <_malloc_r>:
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	1ccd      	adds	r5, r1, #3
 8005e2a:	f025 0503 	bic.w	r5, r5, #3
 8005e2e:	3508      	adds	r5, #8
 8005e30:	2d0c      	cmp	r5, #12
 8005e32:	bf38      	it	cc
 8005e34:	250c      	movcc	r5, #12
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	4606      	mov	r6, r0
 8005e3a:	db01      	blt.n	8005e40 <_malloc_r+0x1c>
 8005e3c:	42a9      	cmp	r1, r5
 8005e3e:	d904      	bls.n	8005e4a <_malloc_r+0x26>
 8005e40:	230c      	movs	r3, #12
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	2000      	movs	r0, #0
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f20 <_malloc_r+0xfc>
 8005e4e:	f000 f869 	bl	8005f24 <__malloc_lock>
 8005e52:	f8d8 3000 	ldr.w	r3, [r8]
 8005e56:	461c      	mov	r4, r3
 8005e58:	bb44      	cbnz	r4, 8005eac <_malloc_r+0x88>
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7ff ffbf 	bl	8005de0 <sbrk_aligned>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	4604      	mov	r4, r0
 8005e66:	d158      	bne.n	8005f1a <_malloc_r+0xf6>
 8005e68:	f8d8 4000 	ldr.w	r4, [r8]
 8005e6c:	4627      	mov	r7, r4
 8005e6e:	2f00      	cmp	r7, #0
 8005e70:	d143      	bne.n	8005efa <_malloc_r+0xd6>
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	d04b      	beq.n	8005f0e <_malloc_r+0xea>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	4639      	mov	r1, r7
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	eb04 0903 	add.w	r9, r4, r3
 8005e80:	f000 f9a4 	bl	80061cc <_sbrk_r>
 8005e84:	4581      	cmp	r9, r0
 8005e86:	d142      	bne.n	8005f0e <_malloc_r+0xea>
 8005e88:	6821      	ldr	r1, [r4, #0]
 8005e8a:	1a6d      	subs	r5, r5, r1
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f7ff ffa6 	bl	8005de0 <sbrk_aligned>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d03a      	beq.n	8005f0e <_malloc_r+0xea>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	442b      	add	r3, r5
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	bb62      	cbnz	r2, 8005f00 <_malloc_r+0xdc>
 8005ea6:	f8c8 7000 	str.w	r7, [r8]
 8005eaa:	e00f      	b.n	8005ecc <_malloc_r+0xa8>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	1b52      	subs	r2, r2, r5
 8005eb0:	d420      	bmi.n	8005ef4 <_malloc_r+0xd0>
 8005eb2:	2a0b      	cmp	r2, #11
 8005eb4:	d917      	bls.n	8005ee6 <_malloc_r+0xc2>
 8005eb6:	1961      	adds	r1, r4, r5
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	6025      	str	r5, [r4, #0]
 8005ebc:	bf18      	it	ne
 8005ebe:	6059      	strne	r1, [r3, #4]
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	bf08      	it	eq
 8005ec4:	f8c8 1000 	streq.w	r1, [r8]
 8005ec8:	5162      	str	r2, [r4, r5]
 8005eca:	604b      	str	r3, [r1, #4]
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f82f 	bl	8005f30 <__malloc_unlock>
 8005ed2:	f104 000b 	add.w	r0, r4, #11
 8005ed6:	1d23      	adds	r3, r4, #4
 8005ed8:	f020 0007 	bic.w	r0, r0, #7
 8005edc:	1ac2      	subs	r2, r0, r3
 8005ede:	bf1c      	itt	ne
 8005ee0:	1a1b      	subne	r3, r3, r0
 8005ee2:	50a3      	strne	r3, [r4, r2]
 8005ee4:	e7af      	b.n	8005e46 <_malloc_r+0x22>
 8005ee6:	6862      	ldr	r2, [r4, #4]
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	bf0c      	ite	eq
 8005eec:	f8c8 2000 	streq.w	r2, [r8]
 8005ef0:	605a      	strne	r2, [r3, #4]
 8005ef2:	e7eb      	b.n	8005ecc <_malloc_r+0xa8>
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	6864      	ldr	r4, [r4, #4]
 8005ef8:	e7ae      	b.n	8005e58 <_malloc_r+0x34>
 8005efa:	463c      	mov	r4, r7
 8005efc:	687f      	ldr	r7, [r7, #4]
 8005efe:	e7b6      	b.n	8005e6e <_malloc_r+0x4a>
 8005f00:	461a      	mov	r2, r3
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d1fb      	bne.n	8005f00 <_malloc_r+0xdc>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6053      	str	r3, [r2, #4]
 8005f0c:	e7de      	b.n	8005ecc <_malloc_r+0xa8>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	6033      	str	r3, [r6, #0]
 8005f12:	4630      	mov	r0, r6
 8005f14:	f000 f80c 	bl	8005f30 <__malloc_unlock>
 8005f18:	e794      	b.n	8005e44 <_malloc_r+0x20>
 8005f1a:	6005      	str	r5, [r0, #0]
 8005f1c:	e7d6      	b.n	8005ecc <_malloc_r+0xa8>
 8005f1e:	bf00      	nop
 8005f20:	2000034c 	.word	0x2000034c

08005f24 <__malloc_lock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	@ (8005f2c <__malloc_lock+0x8>)
 8005f26:	f000 b98b 	b.w	8006240 <__retarget_lock_acquire_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	2000048c 	.word	0x2000048c

08005f30 <__malloc_unlock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	@ (8005f38 <__malloc_unlock+0x8>)
 8005f32:	f000 b986 	b.w	8006242 <__retarget_lock_release_recursive>
 8005f36:	bf00      	nop
 8005f38:	2000048c 	.word	0x2000048c

08005f3c <realloc>:
 8005f3c:	4b02      	ldr	r3, [pc, #8]	@ (8005f48 <realloc+0xc>)
 8005f3e:	460a      	mov	r2, r1
 8005f40:	4601      	mov	r1, r0
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	f000 b802 	b.w	8005f4c <_realloc_r>
 8005f48:	2000000c 	.word	0x2000000c

08005f4c <_realloc_r>:
 8005f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f50:	4607      	mov	r7, r0
 8005f52:	4614      	mov	r4, r2
 8005f54:	460d      	mov	r5, r1
 8005f56:	b921      	cbnz	r1, 8005f62 <_realloc_r+0x16>
 8005f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	f7ff bf61 	b.w	8005e24 <_malloc_r>
 8005f62:	b92a      	cbnz	r2, 8005f70 <_realloc_r+0x24>
 8005f64:	f000 f97c 	bl	8006260 <_free_r>
 8005f68:	4625      	mov	r5, r4
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f70:	f000 f9c0 	bl	80062f4 <_malloc_usable_size_r>
 8005f74:	4284      	cmp	r4, r0
 8005f76:	4606      	mov	r6, r0
 8005f78:	d802      	bhi.n	8005f80 <_realloc_r+0x34>
 8005f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f7e:	d8f4      	bhi.n	8005f6a <_realloc_r+0x1e>
 8005f80:	4621      	mov	r1, r4
 8005f82:	4638      	mov	r0, r7
 8005f84:	f7ff ff4e 	bl	8005e24 <_malloc_r>
 8005f88:	4680      	mov	r8, r0
 8005f8a:	b908      	cbnz	r0, 8005f90 <_realloc_r+0x44>
 8005f8c:	4645      	mov	r5, r8
 8005f8e:	e7ec      	b.n	8005f6a <_realloc_r+0x1e>
 8005f90:	42b4      	cmp	r4, r6
 8005f92:	4622      	mov	r2, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	bf28      	it	cs
 8005f98:	4632      	movcs	r2, r6
 8005f9a:	f000 f953 	bl	8006244 <memcpy>
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f000 f95d 	bl	8006260 <_free_r>
 8005fa6:	e7f1      	b.n	8005f8c <_realloc_r+0x40>

08005fa8 <_strtol_l.isra.0>:
 8005fa8:	2b24      	cmp	r3, #36	@ 0x24
 8005faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fae:	4686      	mov	lr, r0
 8005fb0:	4690      	mov	r8, r2
 8005fb2:	d801      	bhi.n	8005fb8 <_strtol_l.isra.0+0x10>
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d106      	bne.n	8005fc6 <_strtol_l.isra.0+0x1e>
 8005fb8:	f000 f918 	bl	80061ec <__errno>
 8005fbc:	2316      	movs	r3, #22
 8005fbe:	6003      	str	r3, [r0, #0]
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc6:	4834      	ldr	r0, [pc, #208]	@ (8006098 <_strtol_l.isra.0+0xf0>)
 8005fc8:	460d      	mov	r5, r1
 8005fca:	462a      	mov	r2, r5
 8005fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fd0:	5d06      	ldrb	r6, [r0, r4]
 8005fd2:	f016 0608 	ands.w	r6, r6, #8
 8005fd6:	d1f8      	bne.n	8005fca <_strtol_l.isra.0+0x22>
 8005fd8:	2c2d      	cmp	r4, #45	@ 0x2d
 8005fda:	d110      	bne.n	8005ffe <_strtol_l.isra.0+0x56>
 8005fdc:	782c      	ldrb	r4, [r5, #0]
 8005fde:	2601      	movs	r6, #1
 8005fe0:	1c95      	adds	r5, r2, #2
 8005fe2:	f033 0210 	bics.w	r2, r3, #16
 8005fe6:	d115      	bne.n	8006014 <_strtol_l.isra.0+0x6c>
 8005fe8:	2c30      	cmp	r4, #48	@ 0x30
 8005fea:	d10d      	bne.n	8006008 <_strtol_l.isra.0+0x60>
 8005fec:	782a      	ldrb	r2, [r5, #0]
 8005fee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ff2:	2a58      	cmp	r2, #88	@ 0x58
 8005ff4:	d108      	bne.n	8006008 <_strtol_l.isra.0+0x60>
 8005ff6:	786c      	ldrb	r4, [r5, #1]
 8005ff8:	3502      	adds	r5, #2
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	e00a      	b.n	8006014 <_strtol_l.isra.0+0x6c>
 8005ffe:	2c2b      	cmp	r4, #43	@ 0x2b
 8006000:	bf04      	itt	eq
 8006002:	782c      	ldrbeq	r4, [r5, #0]
 8006004:	1c95      	addeq	r5, r2, #2
 8006006:	e7ec      	b.n	8005fe2 <_strtol_l.isra.0+0x3a>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f6      	bne.n	8005ffa <_strtol_l.isra.0+0x52>
 800600c:	2c30      	cmp	r4, #48	@ 0x30
 800600e:	bf14      	ite	ne
 8006010:	230a      	movne	r3, #10
 8006012:	2308      	moveq	r3, #8
 8006014:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006018:	f10c 3cff 	add.w	ip, ip, #4294967295
 800601c:	2200      	movs	r2, #0
 800601e:	fbbc f9f3 	udiv	r9, ip, r3
 8006022:	4610      	mov	r0, r2
 8006024:	fb03 ca19 	mls	sl, r3, r9, ip
 8006028:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800602c:	2f09      	cmp	r7, #9
 800602e:	d80f      	bhi.n	8006050 <_strtol_l.isra.0+0xa8>
 8006030:	463c      	mov	r4, r7
 8006032:	42a3      	cmp	r3, r4
 8006034:	dd1b      	ble.n	800606e <_strtol_l.isra.0+0xc6>
 8006036:	1c57      	adds	r7, r2, #1
 8006038:	d007      	beq.n	800604a <_strtol_l.isra.0+0xa2>
 800603a:	4581      	cmp	r9, r0
 800603c:	d314      	bcc.n	8006068 <_strtol_l.isra.0+0xc0>
 800603e:	d101      	bne.n	8006044 <_strtol_l.isra.0+0x9c>
 8006040:	45a2      	cmp	sl, r4
 8006042:	db11      	blt.n	8006068 <_strtol_l.isra.0+0xc0>
 8006044:	fb00 4003 	mla	r0, r0, r3, r4
 8006048:	2201      	movs	r2, #1
 800604a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800604e:	e7eb      	b.n	8006028 <_strtol_l.isra.0+0x80>
 8006050:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006054:	2f19      	cmp	r7, #25
 8006056:	d801      	bhi.n	800605c <_strtol_l.isra.0+0xb4>
 8006058:	3c37      	subs	r4, #55	@ 0x37
 800605a:	e7ea      	b.n	8006032 <_strtol_l.isra.0+0x8a>
 800605c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006060:	2f19      	cmp	r7, #25
 8006062:	d804      	bhi.n	800606e <_strtol_l.isra.0+0xc6>
 8006064:	3c57      	subs	r4, #87	@ 0x57
 8006066:	e7e4      	b.n	8006032 <_strtol_l.isra.0+0x8a>
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	e7ed      	b.n	800604a <_strtol_l.isra.0+0xa2>
 800606e:	1c53      	adds	r3, r2, #1
 8006070:	d108      	bne.n	8006084 <_strtol_l.isra.0+0xdc>
 8006072:	2322      	movs	r3, #34	@ 0x22
 8006074:	f8ce 3000 	str.w	r3, [lr]
 8006078:	4660      	mov	r0, ip
 800607a:	f1b8 0f00 	cmp.w	r8, #0
 800607e:	d0a0      	beq.n	8005fc2 <_strtol_l.isra.0+0x1a>
 8006080:	1e69      	subs	r1, r5, #1
 8006082:	e006      	b.n	8006092 <_strtol_l.isra.0+0xea>
 8006084:	b106      	cbz	r6, 8006088 <_strtol_l.isra.0+0xe0>
 8006086:	4240      	negs	r0, r0
 8006088:	f1b8 0f00 	cmp.w	r8, #0
 800608c:	d099      	beq.n	8005fc2 <_strtol_l.isra.0+0x1a>
 800608e:	2a00      	cmp	r2, #0
 8006090:	d1f6      	bne.n	8006080 <_strtol_l.isra.0+0xd8>
 8006092:	f8c8 1000 	str.w	r1, [r8]
 8006096:	e794      	b.n	8005fc2 <_strtol_l.isra.0+0x1a>
 8006098:	080074b5 	.word	0x080074b5

0800609c <_strtol_r>:
 800609c:	f7ff bf84 	b.w	8005fa8 <_strtol_l.isra.0>

080060a0 <strtol>:
 80060a0:	4613      	mov	r3, r2
 80060a2:	460a      	mov	r2, r1
 80060a4:	4601      	mov	r1, r0
 80060a6:	4802      	ldr	r0, [pc, #8]	@ (80060b0 <strtol+0x10>)
 80060a8:	6800      	ldr	r0, [r0, #0]
 80060aa:	f7ff bf7d 	b.w	8005fa8 <_strtol_l.isra.0>
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c

080060b4 <sniprintf>:
 80060b4:	b40c      	push	{r2, r3}
 80060b6:	b530      	push	{r4, r5, lr}
 80060b8:	4b18      	ldr	r3, [pc, #96]	@ (800611c <sniprintf+0x68>)
 80060ba:	1e0c      	subs	r4, r1, #0
 80060bc:	681d      	ldr	r5, [r3, #0]
 80060be:	b09d      	sub	sp, #116	@ 0x74
 80060c0:	da08      	bge.n	80060d4 <sniprintf+0x20>
 80060c2:	238b      	movs	r3, #139	@ 0x8b
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ca:	b01d      	add	sp, #116	@ 0x74
 80060cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060d0:	b002      	add	sp, #8
 80060d2:	4770      	bx	lr
 80060d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80060e2:	bf14      	ite	ne
 80060e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060e8:	4623      	moveq	r3, r4
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060f2:	9002      	str	r0, [sp, #8]
 80060f4:	9006      	str	r0, [sp, #24]
 80060f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060fc:	ab21      	add	r3, sp, #132	@ 0x84
 80060fe:	a902      	add	r1, sp, #8
 8006100:	4628      	mov	r0, r5
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	f000 f95a 	bl	80063bc <_svfiprintf_r>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	bfbc      	itt	lt
 800610c:	238b      	movlt	r3, #139	@ 0x8b
 800610e:	602b      	strlt	r3, [r5, #0]
 8006110:	2c00      	cmp	r4, #0
 8006112:	d0da      	beq.n	80060ca <sniprintf+0x16>
 8006114:	9b02      	ldr	r3, [sp, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e7d6      	b.n	80060ca <sniprintf+0x16>
 800611c:	2000000c 	.word	0x2000000c

08006120 <siscanf>:
 8006120:	b40e      	push	{r1, r2, r3}
 8006122:	b570      	push	{r4, r5, r6, lr}
 8006124:	b09d      	sub	sp, #116	@ 0x74
 8006126:	ac21      	add	r4, sp, #132	@ 0x84
 8006128:	2500      	movs	r5, #0
 800612a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800612e:	f854 6b04 	ldr.w	r6, [r4], #4
 8006132:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006136:	951b      	str	r5, [sp, #108]	@ 0x6c
 8006138:	9002      	str	r0, [sp, #8]
 800613a:	9006      	str	r0, [sp, #24]
 800613c:	f7fa f87a 	bl	8000234 <strlen>
 8006140:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <siscanf+0x50>)
 8006142:	9003      	str	r0, [sp, #12]
 8006144:	9007      	str	r0, [sp, #28]
 8006146:	480b      	ldr	r0, [pc, #44]	@ (8006174 <siscanf+0x54>)
 8006148:	930b      	str	r3, [sp, #44]	@ 0x2c
 800614a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800614e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006152:	4632      	mov	r2, r6
 8006154:	4623      	mov	r3, r4
 8006156:	a902      	add	r1, sp, #8
 8006158:	6800      	ldr	r0, [r0, #0]
 800615a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800615c:	9514      	str	r5, [sp, #80]	@ 0x50
 800615e:	9401      	str	r4, [sp, #4]
 8006160:	f000 fa82 	bl	8006668 <__ssvfiscanf_r>
 8006164:	b01d      	add	sp, #116	@ 0x74
 8006166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800616a:	b003      	add	sp, #12
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	08006179 	.word	0x08006179
 8006174:	2000000c 	.word	0x2000000c

08006178 <__seofread>:
 8006178:	2000      	movs	r0, #0
 800617a:	4770      	bx	lr

0800617c <memset>:
 800617c:	4402      	add	r2, r0
 800617e:	4603      	mov	r3, r0
 8006180:	4293      	cmp	r3, r2
 8006182:	d100      	bne.n	8006186 <memset+0xa>
 8006184:	4770      	bx	lr
 8006186:	f803 1b01 	strb.w	r1, [r3], #1
 800618a:	e7f9      	b.n	8006180 <memset+0x4>

0800618c <strchr>:
 800618c:	b2c9      	uxtb	r1, r1
 800618e:	4603      	mov	r3, r0
 8006190:	4618      	mov	r0, r3
 8006192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006196:	b112      	cbz	r2, 800619e <strchr+0x12>
 8006198:	428a      	cmp	r2, r1
 800619a:	d1f9      	bne.n	8006190 <strchr+0x4>
 800619c:	4770      	bx	lr
 800619e:	2900      	cmp	r1, #0
 80061a0:	bf18      	it	ne
 80061a2:	2000      	movne	r0, #0
 80061a4:	4770      	bx	lr

080061a6 <strncpy>:
 80061a6:	b510      	push	{r4, lr}
 80061a8:	3901      	subs	r1, #1
 80061aa:	4603      	mov	r3, r0
 80061ac:	b132      	cbz	r2, 80061bc <strncpy+0x16>
 80061ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80061b2:	f803 4b01 	strb.w	r4, [r3], #1
 80061b6:	3a01      	subs	r2, #1
 80061b8:	2c00      	cmp	r4, #0
 80061ba:	d1f7      	bne.n	80061ac <strncpy+0x6>
 80061bc:	441a      	add	r2, r3
 80061be:	2100      	movs	r1, #0
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d100      	bne.n	80061c6 <strncpy+0x20>
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ca:	e7f9      	b.n	80061c0 <strncpy+0x1a>

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d06      	ldr	r5, [pc, #24]	@ (80061e8 <_sbrk_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fb f9ea 	bl	80015b0 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000488 	.word	0x20000488

080061ec <__errno>:
 80061ec:	4b01      	ldr	r3, [pc, #4]	@ (80061f4 <__errno+0x8>)
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	2000000c 	.word	0x2000000c

080061f8 <__libc_init_array>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006230 <__libc_init_array+0x38>)
 80061fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006234 <__libc_init_array+0x3c>)
 80061fe:	1b64      	subs	r4, r4, r5
 8006200:	10a4      	asrs	r4, r4, #2
 8006202:	2600      	movs	r6, #0
 8006204:	42a6      	cmp	r6, r4
 8006206:	d109      	bne.n	800621c <__libc_init_array+0x24>
 8006208:	4d0b      	ldr	r5, [pc, #44]	@ (8006238 <__libc_init_array+0x40>)
 800620a:	4c0c      	ldr	r4, [pc, #48]	@ (800623c <__libc_init_array+0x44>)
 800620c:	f000 ff7a 	bl	8007104 <_init>
 8006210:	1b64      	subs	r4, r4, r5
 8006212:	10a4      	asrs	r4, r4, #2
 8006214:	2600      	movs	r6, #0
 8006216:	42a6      	cmp	r6, r4
 8006218:	d105      	bne.n	8006226 <__libc_init_array+0x2e>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006220:	4798      	blx	r3
 8006222:	3601      	adds	r6, #1
 8006224:	e7ee      	b.n	8006204 <__libc_init_array+0xc>
 8006226:	f855 3b04 	ldr.w	r3, [r5], #4
 800622a:	4798      	blx	r3
 800622c:	3601      	adds	r6, #1
 800622e:	e7f2      	b.n	8006216 <__libc_init_array+0x1e>
 8006230:	0800760c 	.word	0x0800760c
 8006234:	0800760c 	.word	0x0800760c
 8006238:	0800760c 	.word	0x0800760c
 800623c:	08007610 	.word	0x08007610

08006240 <__retarget_lock_acquire_recursive>:
 8006240:	4770      	bx	lr

08006242 <__retarget_lock_release_recursive>:
 8006242:	4770      	bx	lr

08006244 <memcpy>:
 8006244:	440a      	add	r2, r1
 8006246:	4291      	cmp	r1, r2
 8006248:	f100 33ff 	add.w	r3, r0, #4294967295
 800624c:	d100      	bne.n	8006250 <memcpy+0xc>
 800624e:	4770      	bx	lr
 8006250:	b510      	push	{r4, lr}
 8006252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800625a:	4291      	cmp	r1, r2
 800625c:	d1f9      	bne.n	8006252 <memcpy+0xe>
 800625e:	bd10      	pop	{r4, pc}

08006260 <_free_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4605      	mov	r5, r0
 8006264:	2900      	cmp	r1, #0
 8006266:	d041      	beq.n	80062ec <_free_r+0x8c>
 8006268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626c:	1f0c      	subs	r4, r1, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	bfb8      	it	lt
 8006272:	18e4      	addlt	r4, r4, r3
 8006274:	f7ff fe56 	bl	8005f24 <__malloc_lock>
 8006278:	4a1d      	ldr	r2, [pc, #116]	@ (80062f0 <_free_r+0x90>)
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	b933      	cbnz	r3, 800628c <_free_r+0x2c>
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6014      	str	r4, [r2, #0]
 8006282:	4628      	mov	r0, r5
 8006284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006288:	f7ff be52 	b.w	8005f30 <__malloc_unlock>
 800628c:	42a3      	cmp	r3, r4
 800628e:	d908      	bls.n	80062a2 <_free_r+0x42>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	1821      	adds	r1, r4, r0
 8006294:	428b      	cmp	r3, r1
 8006296:	bf01      	itttt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	1809      	addeq	r1, r1, r0
 800629e:	6021      	streq	r1, [r4, #0]
 80062a0:	e7ed      	b.n	800627e <_free_r+0x1e>
 80062a2:	461a      	mov	r2, r3
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b10b      	cbz	r3, 80062ac <_free_r+0x4c>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d9fa      	bls.n	80062a2 <_free_r+0x42>
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	1850      	adds	r0, r2, r1
 80062b0:	42a0      	cmp	r0, r4
 80062b2:	d10b      	bne.n	80062cc <_free_r+0x6c>
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	4401      	add	r1, r0
 80062b8:	1850      	adds	r0, r2, r1
 80062ba:	4283      	cmp	r3, r0
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	d1e0      	bne.n	8006282 <_free_r+0x22>
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6053      	str	r3, [r2, #4]
 80062c6:	4408      	add	r0, r1
 80062c8:	6010      	str	r0, [r2, #0]
 80062ca:	e7da      	b.n	8006282 <_free_r+0x22>
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x74>
 80062ce:	230c      	movs	r3, #12
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	e7d6      	b.n	8006282 <_free_r+0x22>
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	1821      	adds	r1, r4, r0
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf04      	itt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	bf04      	itt	eq
 80062e4:	1809      	addeq	r1, r1, r0
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	6054      	str	r4, [r2, #4]
 80062ea:	e7ca      	b.n	8006282 <_free_r+0x22>
 80062ec:	bd38      	pop	{r3, r4, r5, pc}
 80062ee:	bf00      	nop
 80062f0:	2000034c 	.word	0x2000034c

080062f4 <_malloc_usable_size_r>:
 80062f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f8:	1f18      	subs	r0, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bfbc      	itt	lt
 80062fe:	580b      	ldrlt	r3, [r1, r0]
 8006300:	18c0      	addlt	r0, r0, r3
 8006302:	4770      	bx	lr

08006304 <__ssputs_r>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	688e      	ldr	r6, [r1, #8]
 800630a:	461f      	mov	r7, r3
 800630c:	42be      	cmp	r6, r7
 800630e:	680b      	ldr	r3, [r1, #0]
 8006310:	4682      	mov	sl, r0
 8006312:	460c      	mov	r4, r1
 8006314:	4690      	mov	r8, r2
 8006316:	d82d      	bhi.n	8006374 <__ssputs_r+0x70>
 8006318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800631c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006320:	d026      	beq.n	8006370 <__ssputs_r+0x6c>
 8006322:	6965      	ldr	r5, [r4, #20]
 8006324:	6909      	ldr	r1, [r1, #16]
 8006326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800632a:	eba3 0901 	sub.w	r9, r3, r1
 800632e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006332:	1c7b      	adds	r3, r7, #1
 8006334:	444b      	add	r3, r9
 8006336:	106d      	asrs	r5, r5, #1
 8006338:	429d      	cmp	r5, r3
 800633a:	bf38      	it	cc
 800633c:	461d      	movcc	r5, r3
 800633e:	0553      	lsls	r3, r2, #21
 8006340:	d527      	bpl.n	8006392 <__ssputs_r+0x8e>
 8006342:	4629      	mov	r1, r5
 8006344:	f7ff fd6e 	bl	8005e24 <_malloc_r>
 8006348:	4606      	mov	r6, r0
 800634a:	b360      	cbz	r0, 80063a6 <__ssputs_r+0xa2>
 800634c:	6921      	ldr	r1, [r4, #16]
 800634e:	464a      	mov	r2, r9
 8006350:	f7ff ff78 	bl	8006244 <memcpy>
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800635a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	6126      	str	r6, [r4, #16]
 8006362:	6165      	str	r5, [r4, #20]
 8006364:	444e      	add	r6, r9
 8006366:	eba5 0509 	sub.w	r5, r5, r9
 800636a:	6026      	str	r6, [r4, #0]
 800636c:	60a5      	str	r5, [r4, #8]
 800636e:	463e      	mov	r6, r7
 8006370:	42be      	cmp	r6, r7
 8006372:	d900      	bls.n	8006376 <__ssputs_r+0x72>
 8006374:	463e      	mov	r6, r7
 8006376:	6820      	ldr	r0, [r4, #0]
 8006378:	4632      	mov	r2, r6
 800637a:	4641      	mov	r1, r8
 800637c:	f000 fe37 	bl	8006fee <memmove>
 8006380:	68a3      	ldr	r3, [r4, #8]
 8006382:	1b9b      	subs	r3, r3, r6
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	4433      	add	r3, r6
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006392:	462a      	mov	r2, r5
 8006394:	f7ff fdda 	bl	8005f4c <_realloc_r>
 8006398:	4606      	mov	r6, r0
 800639a:	2800      	cmp	r0, #0
 800639c:	d1e0      	bne.n	8006360 <__ssputs_r+0x5c>
 800639e:	6921      	ldr	r1, [r4, #16]
 80063a0:	4650      	mov	r0, sl
 80063a2:	f7ff ff5d 	bl	8006260 <_free_r>
 80063a6:	230c      	movs	r3, #12
 80063a8:	f8ca 3000 	str.w	r3, [sl]
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	f04f 30ff 	mov.w	r0, #4294967295
 80063b8:	e7e9      	b.n	800638e <__ssputs_r+0x8a>
	...

080063bc <_svfiprintf_r>:
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	4698      	mov	r8, r3
 80063c2:	898b      	ldrh	r3, [r1, #12]
 80063c4:	061b      	lsls	r3, r3, #24
 80063c6:	b09d      	sub	sp, #116	@ 0x74
 80063c8:	4607      	mov	r7, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	4614      	mov	r4, r2
 80063ce:	d510      	bpl.n	80063f2 <_svfiprintf_r+0x36>
 80063d0:	690b      	ldr	r3, [r1, #16]
 80063d2:	b973      	cbnz	r3, 80063f2 <_svfiprintf_r+0x36>
 80063d4:	2140      	movs	r1, #64	@ 0x40
 80063d6:	f7ff fd25 	bl	8005e24 <_malloc_r>
 80063da:	6028      	str	r0, [r5, #0]
 80063dc:	6128      	str	r0, [r5, #16]
 80063de:	b930      	cbnz	r0, 80063ee <_svfiprintf_r+0x32>
 80063e0:	230c      	movs	r3, #12
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	b01d      	add	sp, #116	@ 0x74
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	2340      	movs	r3, #64	@ 0x40
 80063f0:	616b      	str	r3, [r5, #20]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f6:	2320      	movs	r3, #32
 80063f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006400:	2330      	movs	r3, #48	@ 0x30
 8006402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065a0 <_svfiprintf_r+0x1e4>
 8006406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800640a:	f04f 0901 	mov.w	r9, #1
 800640e:	4623      	mov	r3, r4
 8006410:	469a      	mov	sl, r3
 8006412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006416:	b10a      	cbz	r2, 800641c <_svfiprintf_r+0x60>
 8006418:	2a25      	cmp	r2, #37	@ 0x25
 800641a:	d1f9      	bne.n	8006410 <_svfiprintf_r+0x54>
 800641c:	ebba 0b04 	subs.w	fp, sl, r4
 8006420:	d00b      	beq.n	800643a <_svfiprintf_r+0x7e>
 8006422:	465b      	mov	r3, fp
 8006424:	4622      	mov	r2, r4
 8006426:	4629      	mov	r1, r5
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff6b 	bl	8006304 <__ssputs_r>
 800642e:	3001      	adds	r0, #1
 8006430:	f000 80a7 	beq.w	8006582 <_svfiprintf_r+0x1c6>
 8006434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006436:	445a      	add	r2, fp
 8006438:	9209      	str	r2, [sp, #36]	@ 0x24
 800643a:	f89a 3000 	ldrb.w	r3, [sl]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 809f 	beq.w	8006582 <_svfiprintf_r+0x1c6>
 8006444:	2300      	movs	r3, #0
 8006446:	f04f 32ff 	mov.w	r2, #4294967295
 800644a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800644e:	f10a 0a01 	add.w	sl, sl, #1
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	9307      	str	r3, [sp, #28]
 8006456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800645a:	931a      	str	r3, [sp, #104]	@ 0x68
 800645c:	4654      	mov	r4, sl
 800645e:	2205      	movs	r2, #5
 8006460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006464:	484e      	ldr	r0, [pc, #312]	@ (80065a0 <_svfiprintf_r+0x1e4>)
 8006466:	f7f9 fef3 	bl	8000250 <memchr>
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	b9d8      	cbnz	r0, 80064a6 <_svfiprintf_r+0xea>
 800646e:	06d0      	lsls	r0, r2, #27
 8006470:	bf44      	itt	mi
 8006472:	2320      	movmi	r3, #32
 8006474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006478:	0711      	lsls	r1, r2, #28
 800647a:	bf44      	itt	mi
 800647c:	232b      	movmi	r3, #43	@ 0x2b
 800647e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006482:	f89a 3000 	ldrb.w	r3, [sl]
 8006486:	2b2a      	cmp	r3, #42	@ 0x2a
 8006488:	d015      	beq.n	80064b6 <_svfiprintf_r+0xfa>
 800648a:	9a07      	ldr	r2, [sp, #28]
 800648c:	4654      	mov	r4, sl
 800648e:	2000      	movs	r0, #0
 8006490:	f04f 0c0a 	mov.w	ip, #10
 8006494:	4621      	mov	r1, r4
 8006496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649a:	3b30      	subs	r3, #48	@ 0x30
 800649c:	2b09      	cmp	r3, #9
 800649e:	d94b      	bls.n	8006538 <_svfiprintf_r+0x17c>
 80064a0:	b1b0      	cbz	r0, 80064d0 <_svfiprintf_r+0x114>
 80064a2:	9207      	str	r2, [sp, #28]
 80064a4:	e014      	b.n	80064d0 <_svfiprintf_r+0x114>
 80064a6:	eba0 0308 	sub.w	r3, r0, r8
 80064aa:	fa09 f303 	lsl.w	r3, r9, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	46a2      	mov	sl, r4
 80064b4:	e7d2      	b.n	800645c <_svfiprintf_r+0xa0>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	1d19      	adds	r1, r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	9103      	str	r1, [sp, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bfbb      	ittet	lt
 80064c2:	425b      	neglt	r3, r3
 80064c4:	f042 0202 	orrlt.w	r2, r2, #2
 80064c8:	9307      	strge	r3, [sp, #28]
 80064ca:	9307      	strlt	r3, [sp, #28]
 80064cc:	bfb8      	it	lt
 80064ce:	9204      	strlt	r2, [sp, #16]
 80064d0:	7823      	ldrb	r3, [r4, #0]
 80064d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d4:	d10a      	bne.n	80064ec <_svfiprintf_r+0x130>
 80064d6:	7863      	ldrb	r3, [r4, #1]
 80064d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064da:	d132      	bne.n	8006542 <_svfiprintf_r+0x186>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	1d1a      	adds	r2, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	9203      	str	r2, [sp, #12]
 80064e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064e8:	3402      	adds	r4, #2
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80065b0 <_svfiprintf_r+0x1f4>
 80064f0:	7821      	ldrb	r1, [r4, #0]
 80064f2:	2203      	movs	r2, #3
 80064f4:	4650      	mov	r0, sl
 80064f6:	f7f9 feab 	bl	8000250 <memchr>
 80064fa:	b138      	cbz	r0, 800650c <_svfiprintf_r+0x150>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	eba0 000a 	sub.w	r0, r0, sl
 8006502:	2240      	movs	r2, #64	@ 0x40
 8006504:	4082      	lsls	r2, r0
 8006506:	4313      	orrs	r3, r2
 8006508:	3401      	adds	r4, #1
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006510:	4824      	ldr	r0, [pc, #144]	@ (80065a4 <_svfiprintf_r+0x1e8>)
 8006512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006516:	2206      	movs	r2, #6
 8006518:	f7f9 fe9a 	bl	8000250 <memchr>
 800651c:	2800      	cmp	r0, #0
 800651e:	d036      	beq.n	800658e <_svfiprintf_r+0x1d2>
 8006520:	4b21      	ldr	r3, [pc, #132]	@ (80065a8 <_svfiprintf_r+0x1ec>)
 8006522:	bb1b      	cbnz	r3, 800656c <_svfiprintf_r+0x1b0>
 8006524:	9b03      	ldr	r3, [sp, #12]
 8006526:	3307      	adds	r3, #7
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	3308      	adds	r3, #8
 800652e:	9303      	str	r3, [sp, #12]
 8006530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006532:	4433      	add	r3, r6
 8006534:	9309      	str	r3, [sp, #36]	@ 0x24
 8006536:	e76a      	b.n	800640e <_svfiprintf_r+0x52>
 8006538:	fb0c 3202 	mla	r2, ip, r2, r3
 800653c:	460c      	mov	r4, r1
 800653e:	2001      	movs	r0, #1
 8006540:	e7a8      	b.n	8006494 <_svfiprintf_r+0xd8>
 8006542:	2300      	movs	r3, #0
 8006544:	3401      	adds	r4, #1
 8006546:	9305      	str	r3, [sp, #20]
 8006548:	4619      	mov	r1, r3
 800654a:	f04f 0c0a 	mov.w	ip, #10
 800654e:	4620      	mov	r0, r4
 8006550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006554:	3a30      	subs	r2, #48	@ 0x30
 8006556:	2a09      	cmp	r2, #9
 8006558:	d903      	bls.n	8006562 <_svfiprintf_r+0x1a6>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0c6      	beq.n	80064ec <_svfiprintf_r+0x130>
 800655e:	9105      	str	r1, [sp, #20]
 8006560:	e7c4      	b.n	80064ec <_svfiprintf_r+0x130>
 8006562:	fb0c 2101 	mla	r1, ip, r1, r2
 8006566:	4604      	mov	r4, r0
 8006568:	2301      	movs	r3, #1
 800656a:	e7f0      	b.n	800654e <_svfiprintf_r+0x192>
 800656c:	ab03      	add	r3, sp, #12
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	462a      	mov	r2, r5
 8006572:	4b0e      	ldr	r3, [pc, #56]	@ (80065ac <_svfiprintf_r+0x1f0>)
 8006574:	a904      	add	r1, sp, #16
 8006576:	4638      	mov	r0, r7
 8006578:	f3af 8000 	nop.w
 800657c:	1c42      	adds	r2, r0, #1
 800657e:	4606      	mov	r6, r0
 8006580:	d1d6      	bne.n	8006530 <_svfiprintf_r+0x174>
 8006582:	89ab      	ldrh	r3, [r5, #12]
 8006584:	065b      	lsls	r3, r3, #25
 8006586:	f53f af2d 	bmi.w	80063e4 <_svfiprintf_r+0x28>
 800658a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800658c:	e72c      	b.n	80063e8 <_svfiprintf_r+0x2c>
 800658e:	ab03      	add	r3, sp, #12
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	462a      	mov	r2, r5
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <_svfiprintf_r+0x1f0>)
 8006596:	a904      	add	r1, sp, #16
 8006598:	4638      	mov	r0, r7
 800659a:	f000 fa49 	bl	8006a30 <_printf_i>
 800659e:	e7ed      	b.n	800657c <_svfiprintf_r+0x1c0>
 80065a0:	080075b5 	.word	0x080075b5
 80065a4:	080075bf 	.word	0x080075bf
 80065a8:	00000000 	.word	0x00000000
 80065ac:	08006305 	.word	0x08006305
 80065b0:	080075bb 	.word	0x080075bb

080065b4 <_sungetc_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	1c4b      	adds	r3, r1, #1
 80065b8:	4614      	mov	r4, r2
 80065ba:	d103      	bne.n	80065c4 <_sungetc_r+0x10>
 80065bc:	f04f 35ff 	mov.w	r5, #4294967295
 80065c0:	4628      	mov	r0, r5
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	8993      	ldrh	r3, [r2, #12]
 80065c6:	f023 0320 	bic.w	r3, r3, #32
 80065ca:	8193      	strh	r3, [r2, #12]
 80065cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065ce:	6852      	ldr	r2, [r2, #4]
 80065d0:	b2cd      	uxtb	r5, r1
 80065d2:	b18b      	cbz	r3, 80065f8 <_sungetc_r+0x44>
 80065d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065d6:	4293      	cmp	r3, r2
 80065d8:	dd08      	ble.n	80065ec <_sungetc_r+0x38>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	1e5a      	subs	r2, r3, #1
 80065de:	6022      	str	r2, [r4, #0]
 80065e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	3301      	adds	r3, #1
 80065e8:	6063      	str	r3, [r4, #4]
 80065ea:	e7e9      	b.n	80065c0 <_sungetc_r+0xc>
 80065ec:	4621      	mov	r1, r4
 80065ee:	f000 fcc4 	bl	8006f7a <__submore>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d0f1      	beq.n	80065da <_sungetc_r+0x26>
 80065f6:	e7e1      	b.n	80065bc <_sungetc_r+0x8>
 80065f8:	6921      	ldr	r1, [r4, #16]
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	b151      	cbz	r1, 8006614 <_sungetc_r+0x60>
 80065fe:	4299      	cmp	r1, r3
 8006600:	d208      	bcs.n	8006614 <_sungetc_r+0x60>
 8006602:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006606:	42a9      	cmp	r1, r5
 8006608:	d104      	bne.n	8006614 <_sungetc_r+0x60>
 800660a:	3b01      	subs	r3, #1
 800660c:	3201      	adds	r2, #1
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	6062      	str	r2, [r4, #4]
 8006612:	e7d5      	b.n	80065c0 <_sungetc_r+0xc>
 8006614:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8006618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800661c:	6363      	str	r3, [r4, #52]	@ 0x34
 800661e:	2303      	movs	r3, #3
 8006620:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006622:	4623      	mov	r3, r4
 8006624:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	2301      	movs	r3, #1
 800662c:	e7dc      	b.n	80065e8 <_sungetc_r+0x34>

0800662e <__ssrefill_r>:
 800662e:	b510      	push	{r4, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006634:	b169      	cbz	r1, 8006652 <__ssrefill_r+0x24>
 8006636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800663a:	4299      	cmp	r1, r3
 800663c:	d001      	beq.n	8006642 <__ssrefill_r+0x14>
 800663e:	f7ff fe0f 	bl	8006260 <_free_r>
 8006642:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006644:	6063      	str	r3, [r4, #4]
 8006646:	2000      	movs	r0, #0
 8006648:	6360      	str	r0, [r4, #52]	@ 0x34
 800664a:	b113      	cbz	r3, 8006652 <__ssrefill_r+0x24>
 800664c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	bd10      	pop	{r4, pc}
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f043 0320 	orr.w	r3, r3, #32
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	f04f 30ff 	mov.w	r0, #4294967295
 8006666:	e7f3      	b.n	8006650 <__ssrefill_r+0x22>

08006668 <__ssvfiscanf_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	460c      	mov	r4, r1
 800666e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006672:	2100      	movs	r1, #0
 8006674:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006678:	49a6      	ldr	r1, [pc, #664]	@ (8006914 <__ssvfiscanf_r+0x2ac>)
 800667a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800667c:	f10d 0804 	add.w	r8, sp, #4
 8006680:	49a5      	ldr	r1, [pc, #660]	@ (8006918 <__ssvfiscanf_r+0x2b0>)
 8006682:	4fa6      	ldr	r7, [pc, #664]	@ (800691c <__ssvfiscanf_r+0x2b4>)
 8006684:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006688:	4606      	mov	r6, r0
 800668a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	f892 9000 	ldrb.w	r9, [r2]
 8006692:	f1b9 0f00 	cmp.w	r9, #0
 8006696:	f000 8158 	beq.w	800694a <__ssvfiscanf_r+0x2e2>
 800669a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800669e:	f013 0308 	ands.w	r3, r3, #8
 80066a2:	f102 0501 	add.w	r5, r2, #1
 80066a6:	d019      	beq.n	80066dc <__ssvfiscanf_r+0x74>
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dd0f      	ble.n	80066ce <__ssvfiscanf_r+0x66>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	5cba      	ldrb	r2, [r7, r2]
 80066b4:	0712      	lsls	r2, r2, #28
 80066b6:	d401      	bmi.n	80066bc <__ssvfiscanf_r+0x54>
 80066b8:	462a      	mov	r2, r5
 80066ba:	e7e8      	b.n	800668e <__ssvfiscanf_r+0x26>
 80066bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80066be:	3201      	adds	r2, #1
 80066c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	3301      	adds	r3, #1
 80066c6:	3a01      	subs	r2, #1
 80066c8:	6062      	str	r2, [r4, #4]
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	e7ec      	b.n	80066a8 <__ssvfiscanf_r+0x40>
 80066ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80066d0:	4621      	mov	r1, r4
 80066d2:	4630      	mov	r0, r6
 80066d4:	4798      	blx	r3
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d0e9      	beq.n	80066ae <__ssvfiscanf_r+0x46>
 80066da:	e7ed      	b.n	80066b8 <__ssvfiscanf_r+0x50>
 80066dc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80066e0:	f040 8085 	bne.w	80067ee <__ssvfiscanf_r+0x186>
 80066e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80066e6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80066e8:	7853      	ldrb	r3, [r2, #1]
 80066ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ec:	bf02      	ittt	eq
 80066ee:	2310      	moveq	r3, #16
 80066f0:	1c95      	addeq	r5, r2, #2
 80066f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80066f4:	220a      	movs	r2, #10
 80066f6:	46aa      	mov	sl, r5
 80066f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80066fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006700:	2b09      	cmp	r3, #9
 8006702:	d91e      	bls.n	8006742 <__ssvfiscanf_r+0xda>
 8006704:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8006920 <__ssvfiscanf_r+0x2b8>
 8006708:	2203      	movs	r2, #3
 800670a:	4658      	mov	r0, fp
 800670c:	f7f9 fda0 	bl	8000250 <memchr>
 8006710:	b138      	cbz	r0, 8006722 <__ssvfiscanf_r+0xba>
 8006712:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006714:	eba0 000b 	sub.w	r0, r0, fp
 8006718:	2301      	movs	r3, #1
 800671a:	4083      	lsls	r3, r0
 800671c:	4313      	orrs	r3, r2
 800671e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006720:	4655      	mov	r5, sl
 8006722:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006726:	2b78      	cmp	r3, #120	@ 0x78
 8006728:	d806      	bhi.n	8006738 <__ssvfiscanf_r+0xd0>
 800672a:	2b57      	cmp	r3, #87	@ 0x57
 800672c:	d810      	bhi.n	8006750 <__ssvfiscanf_r+0xe8>
 800672e:	2b25      	cmp	r3, #37	@ 0x25
 8006730:	d05d      	beq.n	80067ee <__ssvfiscanf_r+0x186>
 8006732:	d857      	bhi.n	80067e4 <__ssvfiscanf_r+0x17c>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d075      	beq.n	8006824 <__ssvfiscanf_r+0x1bc>
 8006738:	2303      	movs	r3, #3
 800673a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800673c:	230a      	movs	r3, #10
 800673e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006740:	e088      	b.n	8006854 <__ssvfiscanf_r+0x1ec>
 8006742:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006744:	fb02 1103 	mla	r1, r2, r3, r1
 8006748:	3930      	subs	r1, #48	@ 0x30
 800674a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800674c:	4655      	mov	r5, sl
 800674e:	e7d2      	b.n	80066f6 <__ssvfiscanf_r+0x8e>
 8006750:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006754:	2a20      	cmp	r2, #32
 8006756:	d8ef      	bhi.n	8006738 <__ssvfiscanf_r+0xd0>
 8006758:	a101      	add	r1, pc, #4	@ (adr r1, 8006760 <__ssvfiscanf_r+0xf8>)
 800675a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006833 	.word	0x08006833
 8006764:	08006739 	.word	0x08006739
 8006768:	08006739 	.word	0x08006739
 800676c:	0800688d 	.word	0x0800688d
 8006770:	08006739 	.word	0x08006739
 8006774:	08006739 	.word	0x08006739
 8006778:	08006739 	.word	0x08006739
 800677c:	08006739 	.word	0x08006739
 8006780:	08006739 	.word	0x08006739
 8006784:	08006739 	.word	0x08006739
 8006788:	08006739 	.word	0x08006739
 800678c:	080068a3 	.word	0x080068a3
 8006790:	08006889 	.word	0x08006889
 8006794:	080067eb 	.word	0x080067eb
 8006798:	080067eb 	.word	0x080067eb
 800679c:	080067eb 	.word	0x080067eb
 80067a0:	08006739 	.word	0x08006739
 80067a4:	08006845 	.word	0x08006845
 80067a8:	08006739 	.word	0x08006739
 80067ac:	08006739 	.word	0x08006739
 80067b0:	08006739 	.word	0x08006739
 80067b4:	08006739 	.word	0x08006739
 80067b8:	080068b3 	.word	0x080068b3
 80067bc:	0800684d 	.word	0x0800684d
 80067c0:	0800682b 	.word	0x0800682b
 80067c4:	08006739 	.word	0x08006739
 80067c8:	08006739 	.word	0x08006739
 80067cc:	080068af 	.word	0x080068af
 80067d0:	08006739 	.word	0x08006739
 80067d4:	08006889 	.word	0x08006889
 80067d8:	08006739 	.word	0x08006739
 80067dc:	08006739 	.word	0x08006739
 80067e0:	08006833 	.word	0x08006833
 80067e4:	3b45      	subs	r3, #69	@ 0x45
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d8a6      	bhi.n	8006738 <__ssvfiscanf_r+0xd0>
 80067ea:	2305      	movs	r3, #5
 80067ec:	e031      	b.n	8006852 <__ssvfiscanf_r+0x1ea>
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dd0d      	ble.n	8006810 <__ssvfiscanf_r+0x1a8>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	454a      	cmp	r2, r9
 80067fa:	f040 80a6 	bne.w	800694a <__ssvfiscanf_r+0x2e2>
 80067fe:	3301      	adds	r3, #1
 8006800:	6862      	ldr	r2, [r4, #4]
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006806:	3a01      	subs	r2, #1
 8006808:	3301      	adds	r3, #1
 800680a:	6062      	str	r2, [r4, #4]
 800680c:	9345      	str	r3, [sp, #276]	@ 0x114
 800680e:	e753      	b.n	80066b8 <__ssvfiscanf_r+0x50>
 8006810:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006812:	4621      	mov	r1, r4
 8006814:	4630      	mov	r0, r6
 8006816:	4798      	blx	r3
 8006818:	2800      	cmp	r0, #0
 800681a:	d0eb      	beq.n	80067f4 <__ssvfiscanf_r+0x18c>
 800681c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800681e:	2800      	cmp	r0, #0
 8006820:	f040 808b 	bne.w	800693a <__ssvfiscanf_r+0x2d2>
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	e08b      	b.n	8006942 <__ssvfiscanf_r+0x2da>
 800682a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800682c:	f042 0220 	orr.w	r2, r2, #32
 8006830:	9241      	str	r2, [sp, #260]	@ 0x104
 8006832:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006838:	9241      	str	r2, [sp, #260]	@ 0x104
 800683a:	2210      	movs	r2, #16
 800683c:	2b6e      	cmp	r3, #110	@ 0x6e
 800683e:	9242      	str	r2, [sp, #264]	@ 0x108
 8006840:	d902      	bls.n	8006848 <__ssvfiscanf_r+0x1e0>
 8006842:	e005      	b.n	8006850 <__ssvfiscanf_r+0x1e8>
 8006844:	2300      	movs	r3, #0
 8006846:	9342      	str	r3, [sp, #264]	@ 0x108
 8006848:	2303      	movs	r3, #3
 800684a:	e002      	b.n	8006852 <__ssvfiscanf_r+0x1ea>
 800684c:	2308      	movs	r3, #8
 800684e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006850:	2304      	movs	r3, #4
 8006852:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	dd39      	ble.n	80068ce <__ssvfiscanf_r+0x266>
 800685a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800685c:	0659      	lsls	r1, r3, #25
 800685e:	d404      	bmi.n	800686a <__ssvfiscanf_r+0x202>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	5cba      	ldrb	r2, [r7, r2]
 8006866:	0712      	lsls	r2, r2, #28
 8006868:	d438      	bmi.n	80068dc <__ssvfiscanf_r+0x274>
 800686a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800686c:	2b02      	cmp	r3, #2
 800686e:	dc47      	bgt.n	8006900 <__ssvfiscanf_r+0x298>
 8006870:	466b      	mov	r3, sp
 8006872:	4622      	mov	r2, r4
 8006874:	a941      	add	r1, sp, #260	@ 0x104
 8006876:	4630      	mov	r0, r6
 8006878:	f000 f9f8 	bl	8006c6c <_scanf_chars>
 800687c:	2801      	cmp	r0, #1
 800687e:	d064      	beq.n	800694a <__ssvfiscanf_r+0x2e2>
 8006880:	2802      	cmp	r0, #2
 8006882:	f47f af19 	bne.w	80066b8 <__ssvfiscanf_r+0x50>
 8006886:	e7c9      	b.n	800681c <__ssvfiscanf_r+0x1b4>
 8006888:	220a      	movs	r2, #10
 800688a:	e7d7      	b.n	800683c <__ssvfiscanf_r+0x1d4>
 800688c:	4629      	mov	r1, r5
 800688e:	4640      	mov	r0, r8
 8006890:	f000 fb3a 	bl	8006f08 <__sccl>
 8006894:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800689a:	9341      	str	r3, [sp, #260]	@ 0x104
 800689c:	4605      	mov	r5, r0
 800689e:	2301      	movs	r3, #1
 80068a0:	e7d7      	b.n	8006852 <__ssvfiscanf_r+0x1ea>
 80068a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80068a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80068aa:	2300      	movs	r3, #0
 80068ac:	e7d1      	b.n	8006852 <__ssvfiscanf_r+0x1ea>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e7cf      	b.n	8006852 <__ssvfiscanf_r+0x1ea>
 80068b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80068b4:	06c3      	lsls	r3, r0, #27
 80068b6:	f53f aeff 	bmi.w	80066b8 <__ssvfiscanf_r+0x50>
 80068ba:	9b00      	ldr	r3, [sp, #0]
 80068bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80068be:	1d19      	adds	r1, r3, #4
 80068c0:	9100      	str	r1, [sp, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	07c0      	lsls	r0, r0, #31
 80068c6:	bf4c      	ite	mi
 80068c8:	801a      	strhmi	r2, [r3, #0]
 80068ca:	601a      	strpl	r2, [r3, #0]
 80068cc:	e6f4      	b.n	80066b8 <__ssvfiscanf_r+0x50>
 80068ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80068d0:	4621      	mov	r1, r4
 80068d2:	4630      	mov	r0, r6
 80068d4:	4798      	blx	r3
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d0bf      	beq.n	800685a <__ssvfiscanf_r+0x1f2>
 80068da:	e79f      	b.n	800681c <__ssvfiscanf_r+0x1b4>
 80068dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80068de:	3201      	adds	r2, #1
 80068e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80068e2:	6862      	ldr	r2, [r4, #4]
 80068e4:	3a01      	subs	r2, #1
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	6062      	str	r2, [r4, #4]
 80068ea:	dd02      	ble.n	80068f2 <__ssvfiscanf_r+0x28a>
 80068ec:	3301      	adds	r3, #1
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	e7b6      	b.n	8006860 <__ssvfiscanf_r+0x1f8>
 80068f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80068f4:	4621      	mov	r1, r4
 80068f6:	4630      	mov	r0, r6
 80068f8:	4798      	blx	r3
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d0b0      	beq.n	8006860 <__ssvfiscanf_r+0x1f8>
 80068fe:	e78d      	b.n	800681c <__ssvfiscanf_r+0x1b4>
 8006900:	2b04      	cmp	r3, #4
 8006902:	dc0f      	bgt.n	8006924 <__ssvfiscanf_r+0x2bc>
 8006904:	466b      	mov	r3, sp
 8006906:	4622      	mov	r2, r4
 8006908:	a941      	add	r1, sp, #260	@ 0x104
 800690a:	4630      	mov	r0, r6
 800690c:	f000 fa08 	bl	8006d20 <_scanf_i>
 8006910:	e7b4      	b.n	800687c <__ssvfiscanf_r+0x214>
 8006912:	bf00      	nop
 8006914:	080065b5 	.word	0x080065b5
 8006918:	0800662f 	.word	0x0800662f
 800691c:	080074b5 	.word	0x080074b5
 8006920:	080075bb 	.word	0x080075bb
 8006924:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <__ssvfiscanf_r+0x2e8>)
 8006926:	2b00      	cmp	r3, #0
 8006928:	f43f aec6 	beq.w	80066b8 <__ssvfiscanf_r+0x50>
 800692c:	466b      	mov	r3, sp
 800692e:	4622      	mov	r2, r4
 8006930:	a941      	add	r1, sp, #260	@ 0x104
 8006932:	4630      	mov	r0, r6
 8006934:	f3af 8000 	nop.w
 8006938:	e7a0      	b.n	800687c <__ssvfiscanf_r+0x214>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	065b      	lsls	r3, r3, #25
 800693e:	f53f af71 	bmi.w	8006824 <__ssvfiscanf_r+0x1bc>
 8006942:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800694c:	e7f9      	b.n	8006942 <__ssvfiscanf_r+0x2da>
 800694e:	bf00      	nop
 8006950:	00000000 	.word	0x00000000

08006954 <_printf_common>:
 8006954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	4616      	mov	r6, r2
 800695a:	4698      	mov	r8, r3
 800695c:	688a      	ldr	r2, [r1, #8]
 800695e:	690b      	ldr	r3, [r1, #16]
 8006960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006964:	4293      	cmp	r3, r2
 8006966:	bfb8      	it	lt
 8006968:	4613      	movlt	r3, r2
 800696a:	6033      	str	r3, [r6, #0]
 800696c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006970:	4607      	mov	r7, r0
 8006972:	460c      	mov	r4, r1
 8006974:	b10a      	cbz	r2, 800697a <_printf_common+0x26>
 8006976:	3301      	adds	r3, #1
 8006978:	6033      	str	r3, [r6, #0]
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	0699      	lsls	r1, r3, #26
 800697e:	bf42      	ittt	mi
 8006980:	6833      	ldrmi	r3, [r6, #0]
 8006982:	3302      	addmi	r3, #2
 8006984:	6033      	strmi	r3, [r6, #0]
 8006986:	6825      	ldr	r5, [r4, #0]
 8006988:	f015 0506 	ands.w	r5, r5, #6
 800698c:	d106      	bne.n	800699c <_printf_common+0x48>
 800698e:	f104 0a19 	add.w	sl, r4, #25
 8006992:	68e3      	ldr	r3, [r4, #12]
 8006994:	6832      	ldr	r2, [r6, #0]
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	42ab      	cmp	r3, r5
 800699a:	dc26      	bgt.n	80069ea <_printf_common+0x96>
 800699c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	3b00      	subs	r3, #0
 80069a4:	bf18      	it	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	0692      	lsls	r2, r2, #26
 80069aa:	d42b      	bmi.n	8006a04 <_printf_common+0xb0>
 80069ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069b0:	4641      	mov	r1, r8
 80069b2:	4638      	mov	r0, r7
 80069b4:	47c8      	blx	r9
 80069b6:	3001      	adds	r0, #1
 80069b8:	d01e      	beq.n	80069f8 <_printf_common+0xa4>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	f003 0306 	and.w	r3, r3, #6
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	bf02      	ittt	eq
 80069c6:	68e5      	ldreq	r5, [r4, #12]
 80069c8:	6833      	ldreq	r3, [r6, #0]
 80069ca:	1aed      	subeq	r5, r5, r3
 80069cc:	68a3      	ldr	r3, [r4, #8]
 80069ce:	bf0c      	ite	eq
 80069d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069d4:	2500      	movne	r5, #0
 80069d6:	4293      	cmp	r3, r2
 80069d8:	bfc4      	itt	gt
 80069da:	1a9b      	subgt	r3, r3, r2
 80069dc:	18ed      	addgt	r5, r5, r3
 80069de:	2600      	movs	r6, #0
 80069e0:	341a      	adds	r4, #26
 80069e2:	42b5      	cmp	r5, r6
 80069e4:	d11a      	bne.n	8006a1c <_printf_common+0xc8>
 80069e6:	2000      	movs	r0, #0
 80069e8:	e008      	b.n	80069fc <_printf_common+0xa8>
 80069ea:	2301      	movs	r3, #1
 80069ec:	4652      	mov	r2, sl
 80069ee:	4641      	mov	r1, r8
 80069f0:	4638      	mov	r0, r7
 80069f2:	47c8      	blx	r9
 80069f4:	3001      	adds	r0, #1
 80069f6:	d103      	bne.n	8006a00 <_printf_common+0xac>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a00:	3501      	adds	r5, #1
 8006a02:	e7c6      	b.n	8006992 <_printf_common+0x3e>
 8006a04:	18e1      	adds	r1, r4, r3
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	2030      	movs	r0, #48	@ 0x30
 8006a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a0e:	4422      	add	r2, r4
 8006a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a18:	3302      	adds	r3, #2
 8006a1a:	e7c7      	b.n	80069ac <_printf_common+0x58>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4641      	mov	r1, r8
 8006a22:	4638      	mov	r0, r7
 8006a24:	47c8      	blx	r9
 8006a26:	3001      	adds	r0, #1
 8006a28:	d0e6      	beq.n	80069f8 <_printf_common+0xa4>
 8006a2a:	3601      	adds	r6, #1
 8006a2c:	e7d9      	b.n	80069e2 <_printf_common+0x8e>
	...

08006a30 <_printf_i>:
 8006a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	7e0f      	ldrb	r7, [r1, #24]
 8006a36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a38:	2f78      	cmp	r7, #120	@ 0x78
 8006a3a:	4691      	mov	r9, r2
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	469a      	mov	sl, r3
 8006a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a46:	d807      	bhi.n	8006a58 <_printf_i+0x28>
 8006a48:	2f62      	cmp	r7, #98	@ 0x62
 8006a4a:	d80a      	bhi.n	8006a62 <_printf_i+0x32>
 8006a4c:	2f00      	cmp	r7, #0
 8006a4e:	f000 80d1 	beq.w	8006bf4 <_printf_i+0x1c4>
 8006a52:	2f58      	cmp	r7, #88	@ 0x58
 8006a54:	f000 80b8 	beq.w	8006bc8 <_printf_i+0x198>
 8006a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a60:	e03a      	b.n	8006ad8 <_printf_i+0xa8>
 8006a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a66:	2b15      	cmp	r3, #21
 8006a68:	d8f6      	bhi.n	8006a58 <_printf_i+0x28>
 8006a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a70 <_printf_i+0x40>)
 8006a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a70:	08006ac9 	.word	0x08006ac9
 8006a74:	08006add 	.word	0x08006add
 8006a78:	08006a59 	.word	0x08006a59
 8006a7c:	08006a59 	.word	0x08006a59
 8006a80:	08006a59 	.word	0x08006a59
 8006a84:	08006a59 	.word	0x08006a59
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006a59 	.word	0x08006a59
 8006a90:	08006a59 	.word	0x08006a59
 8006a94:	08006a59 	.word	0x08006a59
 8006a98:	08006a59 	.word	0x08006a59
 8006a9c:	08006bdb 	.word	0x08006bdb
 8006aa0:	08006b07 	.word	0x08006b07
 8006aa4:	08006b95 	.word	0x08006b95
 8006aa8:	08006a59 	.word	0x08006a59
 8006aac:	08006a59 	.word	0x08006a59
 8006ab0:	08006bfd 	.word	0x08006bfd
 8006ab4:	08006a59 	.word	0x08006a59
 8006ab8:	08006b07 	.word	0x08006b07
 8006abc:	08006a59 	.word	0x08006a59
 8006ac0:	08006a59 	.word	0x08006a59
 8006ac4:	08006b9d 	.word	0x08006b9d
 8006ac8:	6833      	ldr	r3, [r6, #0]
 8006aca:	1d1a      	adds	r2, r3, #4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6032      	str	r2, [r6, #0]
 8006ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e09c      	b.n	8006c16 <_printf_i+0x1e6>
 8006adc:	6833      	ldr	r3, [r6, #0]
 8006ade:	6820      	ldr	r0, [r4, #0]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	6031      	str	r1, [r6, #0]
 8006ae4:	0606      	lsls	r6, r0, #24
 8006ae6:	d501      	bpl.n	8006aec <_printf_i+0xbc>
 8006ae8:	681d      	ldr	r5, [r3, #0]
 8006aea:	e003      	b.n	8006af4 <_printf_i+0xc4>
 8006aec:	0645      	lsls	r5, r0, #25
 8006aee:	d5fb      	bpl.n	8006ae8 <_printf_i+0xb8>
 8006af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006af4:	2d00      	cmp	r5, #0
 8006af6:	da03      	bge.n	8006b00 <_printf_i+0xd0>
 8006af8:	232d      	movs	r3, #45	@ 0x2d
 8006afa:	426d      	negs	r5, r5
 8006afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b00:	4858      	ldr	r0, [pc, #352]	@ (8006c64 <_printf_i+0x234>)
 8006b02:	230a      	movs	r3, #10
 8006b04:	e011      	b.n	8006b2a <_printf_i+0xfa>
 8006b06:	6821      	ldr	r1, [r4, #0]
 8006b08:	6833      	ldr	r3, [r6, #0]
 8006b0a:	0608      	lsls	r0, r1, #24
 8006b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b10:	d402      	bmi.n	8006b18 <_printf_i+0xe8>
 8006b12:	0649      	lsls	r1, r1, #25
 8006b14:	bf48      	it	mi
 8006b16:	b2ad      	uxthmi	r5, r5
 8006b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b1a:	4852      	ldr	r0, [pc, #328]	@ (8006c64 <_printf_i+0x234>)
 8006b1c:	6033      	str	r3, [r6, #0]
 8006b1e:	bf14      	ite	ne
 8006b20:	230a      	movne	r3, #10
 8006b22:	2308      	moveq	r3, #8
 8006b24:	2100      	movs	r1, #0
 8006b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b2a:	6866      	ldr	r6, [r4, #4]
 8006b2c:	60a6      	str	r6, [r4, #8]
 8006b2e:	2e00      	cmp	r6, #0
 8006b30:	db05      	blt.n	8006b3e <_printf_i+0x10e>
 8006b32:	6821      	ldr	r1, [r4, #0]
 8006b34:	432e      	orrs	r6, r5
 8006b36:	f021 0104 	bic.w	r1, r1, #4
 8006b3a:	6021      	str	r1, [r4, #0]
 8006b3c:	d04b      	beq.n	8006bd6 <_printf_i+0x1a6>
 8006b3e:	4616      	mov	r6, r2
 8006b40:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b44:	fb03 5711 	mls	r7, r3, r1, r5
 8006b48:	5dc7      	ldrb	r7, [r0, r7]
 8006b4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b4e:	462f      	mov	r7, r5
 8006b50:	42bb      	cmp	r3, r7
 8006b52:	460d      	mov	r5, r1
 8006b54:	d9f4      	bls.n	8006b40 <_printf_i+0x110>
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d10b      	bne.n	8006b72 <_printf_i+0x142>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	07df      	lsls	r7, r3, #31
 8006b5e:	d508      	bpl.n	8006b72 <_printf_i+0x142>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	6861      	ldr	r1, [r4, #4]
 8006b64:	4299      	cmp	r1, r3
 8006b66:	bfde      	ittt	le
 8006b68:	2330      	movle	r3, #48	@ 0x30
 8006b6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b72:	1b92      	subs	r2, r2, r6
 8006b74:	6122      	str	r2, [r4, #16]
 8006b76:	f8cd a000 	str.w	sl, [sp]
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	aa03      	add	r2, sp, #12
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4640      	mov	r0, r8
 8006b82:	f7ff fee7 	bl	8006954 <_printf_common>
 8006b86:	3001      	adds	r0, #1
 8006b88:	d14a      	bne.n	8006c20 <_printf_i+0x1f0>
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8e:	b004      	add	sp, #16
 8006b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	f043 0320 	orr.w	r3, r3, #32
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	4832      	ldr	r0, [pc, #200]	@ (8006c68 <_printf_i+0x238>)
 8006b9e:	2778      	movs	r7, #120	@ 0x78
 8006ba0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	6831      	ldr	r1, [r6, #0]
 8006ba8:	061f      	lsls	r7, r3, #24
 8006baa:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bae:	d402      	bmi.n	8006bb6 <_printf_i+0x186>
 8006bb0:	065f      	lsls	r7, r3, #25
 8006bb2:	bf48      	it	mi
 8006bb4:	b2ad      	uxthmi	r5, r5
 8006bb6:	6031      	str	r1, [r6, #0]
 8006bb8:	07d9      	lsls	r1, r3, #31
 8006bba:	bf44      	itt	mi
 8006bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8006bc0:	6023      	strmi	r3, [r4, #0]
 8006bc2:	b11d      	cbz	r5, 8006bcc <_printf_i+0x19c>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	e7ad      	b.n	8006b24 <_printf_i+0xf4>
 8006bc8:	4826      	ldr	r0, [pc, #152]	@ (8006c64 <_printf_i+0x234>)
 8006bca:	e7e9      	b.n	8006ba0 <_printf_i+0x170>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	f023 0320 	bic.w	r3, r3, #32
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	e7f6      	b.n	8006bc4 <_printf_i+0x194>
 8006bd6:	4616      	mov	r6, r2
 8006bd8:	e7bd      	b.n	8006b56 <_printf_i+0x126>
 8006bda:	6833      	ldr	r3, [r6, #0]
 8006bdc:	6825      	ldr	r5, [r4, #0]
 8006bde:	6961      	ldr	r1, [r4, #20]
 8006be0:	1d18      	adds	r0, r3, #4
 8006be2:	6030      	str	r0, [r6, #0]
 8006be4:	062e      	lsls	r6, r5, #24
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	d501      	bpl.n	8006bee <_printf_i+0x1be>
 8006bea:	6019      	str	r1, [r3, #0]
 8006bec:	e002      	b.n	8006bf4 <_printf_i+0x1c4>
 8006bee:	0668      	lsls	r0, r5, #25
 8006bf0:	d5fb      	bpl.n	8006bea <_printf_i+0x1ba>
 8006bf2:	8019      	strh	r1, [r3, #0]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	e7bc      	b.n	8006b76 <_printf_i+0x146>
 8006bfc:	6833      	ldr	r3, [r6, #0]
 8006bfe:	1d1a      	adds	r2, r3, #4
 8006c00:	6032      	str	r2, [r6, #0]
 8006c02:	681e      	ldr	r6, [r3, #0]
 8006c04:	6862      	ldr	r2, [r4, #4]
 8006c06:	2100      	movs	r1, #0
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7f9 fb21 	bl	8000250 <memchr>
 8006c0e:	b108      	cbz	r0, 8006c14 <_printf_i+0x1e4>
 8006c10:	1b80      	subs	r0, r0, r6
 8006c12:	6060      	str	r0, [r4, #4]
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	6123      	str	r3, [r4, #16]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c1e:	e7aa      	b.n	8006b76 <_printf_i+0x146>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	4632      	mov	r2, r6
 8006c24:	4649      	mov	r1, r9
 8006c26:	4640      	mov	r0, r8
 8006c28:	47d0      	blx	sl
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d0ad      	beq.n	8006b8a <_printf_i+0x15a>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	079b      	lsls	r3, r3, #30
 8006c32:	d413      	bmi.n	8006c5c <_printf_i+0x22c>
 8006c34:	68e0      	ldr	r0, [r4, #12]
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	4298      	cmp	r0, r3
 8006c3a:	bfb8      	it	lt
 8006c3c:	4618      	movlt	r0, r3
 8006c3e:	e7a6      	b.n	8006b8e <_printf_i+0x15e>
 8006c40:	2301      	movs	r3, #1
 8006c42:	4632      	mov	r2, r6
 8006c44:	4649      	mov	r1, r9
 8006c46:	4640      	mov	r0, r8
 8006c48:	47d0      	blx	sl
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d09d      	beq.n	8006b8a <_printf_i+0x15a>
 8006c4e:	3501      	adds	r5, #1
 8006c50:	68e3      	ldr	r3, [r4, #12]
 8006c52:	9903      	ldr	r1, [sp, #12]
 8006c54:	1a5b      	subs	r3, r3, r1
 8006c56:	42ab      	cmp	r3, r5
 8006c58:	dcf2      	bgt.n	8006c40 <_printf_i+0x210>
 8006c5a:	e7eb      	b.n	8006c34 <_printf_i+0x204>
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	f104 0619 	add.w	r6, r4, #25
 8006c62:	e7f5      	b.n	8006c50 <_printf_i+0x220>
 8006c64:	080075c6 	.word	0x080075c6
 8006c68:	080075d7 	.word	0x080075d7

08006c6c <_scanf_chars>:
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	4615      	mov	r5, r2
 8006c72:	688a      	ldr	r2, [r1, #8]
 8006c74:	4680      	mov	r8, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	b932      	cbnz	r2, 8006c88 <_scanf_chars+0x1c>
 8006c7a:	698a      	ldr	r2, [r1, #24]
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	bf14      	ite	ne
 8006c80:	f04f 32ff 	movne.w	r2, #4294967295
 8006c84:	2201      	moveq	r2, #1
 8006c86:	608a      	str	r2, [r1, #8]
 8006c88:	6822      	ldr	r2, [r4, #0]
 8006c8a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006d1c <_scanf_chars+0xb0>
 8006c8e:	06d1      	lsls	r1, r2, #27
 8006c90:	bf5f      	itttt	pl
 8006c92:	681a      	ldrpl	r2, [r3, #0]
 8006c94:	1d11      	addpl	r1, r2, #4
 8006c96:	6019      	strpl	r1, [r3, #0]
 8006c98:	6816      	ldrpl	r6, [r2, #0]
 8006c9a:	2700      	movs	r7, #0
 8006c9c:	69a0      	ldr	r0, [r4, #24]
 8006c9e:	b188      	cbz	r0, 8006cc4 <_scanf_chars+0x58>
 8006ca0:	2801      	cmp	r0, #1
 8006ca2:	d107      	bne.n	8006cb4 <_scanf_chars+0x48>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	6963      	ldr	r3, [r4, #20]
 8006caa:	5c9b      	ldrb	r3, [r3, r2]
 8006cac:	b953      	cbnz	r3, 8006cc4 <_scanf_chars+0x58>
 8006cae:	2f00      	cmp	r7, #0
 8006cb0:	d031      	beq.n	8006d16 <_scanf_chars+0xaa>
 8006cb2:	e022      	b.n	8006cfa <_scanf_chars+0x8e>
 8006cb4:	2802      	cmp	r0, #2
 8006cb6:	d120      	bne.n	8006cfa <_scanf_chars+0x8e>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006cc0:	071b      	lsls	r3, r3, #28
 8006cc2:	d41a      	bmi.n	8006cfa <_scanf_chars+0x8e>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	06da      	lsls	r2, r3, #27
 8006cc8:	bf5e      	ittt	pl
 8006cca:	682b      	ldrpl	r3, [r5, #0]
 8006ccc:	781b      	ldrbpl	r3, [r3, #0]
 8006cce:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006cd2:	682a      	ldr	r2, [r5, #0]
 8006cd4:	686b      	ldr	r3, [r5, #4]
 8006cd6:	3201      	adds	r2, #1
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	68a2      	ldr	r2, [r4, #8]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	3a01      	subs	r2, #1
 8006ce0:	606b      	str	r3, [r5, #4]
 8006ce2:	3701      	adds	r7, #1
 8006ce4:	60a2      	str	r2, [r4, #8]
 8006ce6:	b142      	cbz	r2, 8006cfa <_scanf_chars+0x8e>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dcd7      	bgt.n	8006c9c <_scanf_chars+0x30>
 8006cec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	4798      	blx	r3
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d0d0      	beq.n	8006c9c <_scanf_chars+0x30>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	f013 0310 	ands.w	r3, r3, #16
 8006d00:	d105      	bne.n	8006d0e <_scanf_chars+0xa2>
 8006d02:	68e2      	ldr	r2, [r4, #12]
 8006d04:	3201      	adds	r2, #1
 8006d06:	60e2      	str	r2, [r4, #12]
 8006d08:	69a2      	ldr	r2, [r4, #24]
 8006d0a:	b102      	cbz	r2, 8006d0e <_scanf_chars+0xa2>
 8006d0c:	7033      	strb	r3, [r6, #0]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	443b      	add	r3, r7
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	2000      	movs	r0, #0
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	bf00      	nop
 8006d1c:	080074b5 	.word	0x080074b5

08006d20 <_scanf_i>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	4698      	mov	r8, r3
 8006d26:	4b74      	ldr	r3, [pc, #464]	@ (8006ef8 <_scanf_i+0x1d8>)
 8006d28:	460c      	mov	r4, r1
 8006d2a:	4682      	mov	sl, r0
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d32:	b087      	sub	sp, #28
 8006d34:	ab03      	add	r3, sp, #12
 8006d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006d3a:	4b70      	ldr	r3, [pc, #448]	@ (8006efc <_scanf_i+0x1dc>)
 8006d3c:	69a1      	ldr	r1, [r4, #24]
 8006d3e:	4a70      	ldr	r2, [pc, #448]	@ (8006f00 <_scanf_i+0x1e0>)
 8006d40:	2903      	cmp	r1, #3
 8006d42:	bf08      	it	eq
 8006d44:	461a      	moveq	r2, r3
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	9201      	str	r2, [sp, #4]
 8006d4a:	1e5a      	subs	r2, r3, #1
 8006d4c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d50:	bf88      	it	hi
 8006d52:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d56:	4627      	mov	r7, r4
 8006d58:	bf82      	ittt	hi
 8006d5a:	eb03 0905 	addhi.w	r9, r3, r5
 8006d5e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d62:	60a3      	strhi	r3, [r4, #8]
 8006d64:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006d68:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006d6c:	bf98      	it	ls
 8006d6e:	f04f 0900 	movls.w	r9, #0
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	463d      	mov	r5, r7
 8006d76:	f04f 0b00 	mov.w	fp, #0
 8006d7a:	6831      	ldr	r1, [r6, #0]
 8006d7c:	ab03      	add	r3, sp, #12
 8006d7e:	7809      	ldrb	r1, [r1, #0]
 8006d80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f7f9 fa63 	bl	8000250 <memchr>
 8006d8a:	b328      	cbz	r0, 8006dd8 <_scanf_i+0xb8>
 8006d8c:	f1bb 0f01 	cmp.w	fp, #1
 8006d90:	d159      	bne.n	8006e46 <_scanf_i+0x126>
 8006d92:	6862      	ldr	r2, [r4, #4]
 8006d94:	b92a      	cbnz	r2, 8006da2 <_scanf_i+0x82>
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	2108      	movs	r1, #8
 8006d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d9e:	6061      	str	r1, [r4, #4]
 8006da0:	6022      	str	r2, [r4, #0]
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006da8:	6022      	str	r2, [r4, #0]
 8006daa:	68a2      	ldr	r2, [r4, #8]
 8006dac:	1e51      	subs	r1, r2, #1
 8006dae:	60a1      	str	r1, [r4, #8]
 8006db0:	b192      	cbz	r2, 8006dd8 <_scanf_i+0xb8>
 8006db2:	6832      	ldr	r2, [r6, #0]
 8006db4:	1c51      	adds	r1, r2, #1
 8006db6:	6031      	str	r1, [r6, #0]
 8006db8:	7812      	ldrb	r2, [r2, #0]
 8006dba:	f805 2b01 	strb.w	r2, [r5], #1
 8006dbe:	6872      	ldr	r2, [r6, #4]
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	6072      	str	r2, [r6, #4]
 8006dc6:	dc07      	bgt.n	8006dd8 <_scanf_i+0xb8>
 8006dc8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4650      	mov	r0, sl
 8006dd0:	4790      	blx	r2
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	f040 8085 	bne.w	8006ee2 <_scanf_i+0x1c2>
 8006dd8:	f10b 0b01 	add.w	fp, fp, #1
 8006ddc:	f1bb 0f03 	cmp.w	fp, #3
 8006de0:	d1cb      	bne.n	8006d7a <_scanf_i+0x5a>
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	b90b      	cbnz	r3, 8006dea <_scanf_i+0xca>
 8006de6:	230a      	movs	r3, #10
 8006de8:	6063      	str	r3, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	4945      	ldr	r1, [pc, #276]	@ (8006f04 <_scanf_i+0x1e4>)
 8006dee:	6960      	ldr	r0, [r4, #20]
 8006df0:	1ac9      	subs	r1, r1, r3
 8006df2:	f000 f889 	bl	8006f08 <__sccl>
 8006df6:	f04f 0b00 	mov.w	fp, #0
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d03d      	beq.n	8006e7e <_scanf_i+0x15e>
 8006e02:	6831      	ldr	r1, [r6, #0]
 8006e04:	6960      	ldr	r0, [r4, #20]
 8006e06:	f891 c000 	ldrb.w	ip, [r1]
 8006e0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d035      	beq.n	8006e7e <_scanf_i+0x15e>
 8006e12:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006e16:	d124      	bne.n	8006e62 <_scanf_i+0x142>
 8006e18:	0510      	lsls	r0, r2, #20
 8006e1a:	d522      	bpl.n	8006e62 <_scanf_i+0x142>
 8006e1c:	f10b 0b01 	add.w	fp, fp, #1
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	d003      	beq.n	8006e2e <_scanf_i+0x10e>
 8006e26:	3301      	adds	r3, #1
 8006e28:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	6873      	ldr	r3, [r6, #4]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	6073      	str	r3, [r6, #4]
 8006e36:	dd1b      	ble.n	8006e70 <_scanf_i+0x150>
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	60a3      	str	r3, [r4, #8]
 8006e44:	e7d9      	b.n	8006dfa <_scanf_i+0xda>
 8006e46:	f1bb 0f02 	cmp.w	fp, #2
 8006e4a:	d1ae      	bne.n	8006daa <_scanf_i+0x8a>
 8006e4c:	6822      	ldr	r2, [r4, #0]
 8006e4e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006e52:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006e56:	d1c4      	bne.n	8006de2 <_scanf_i+0xc2>
 8006e58:	2110      	movs	r1, #16
 8006e5a:	6061      	str	r1, [r4, #4]
 8006e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e60:	e7a2      	b.n	8006da8 <_scanf_i+0x88>
 8006e62:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	780b      	ldrb	r3, [r1, #0]
 8006e6a:	f805 3b01 	strb.w	r3, [r5], #1
 8006e6e:	e7de      	b.n	8006e2e <_scanf_i+0x10e>
 8006e70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e74:	4631      	mov	r1, r6
 8006e76:	4650      	mov	r0, sl
 8006e78:	4798      	blx	r3
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0df      	beq.n	8006e3e <_scanf_i+0x11e>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	05d9      	lsls	r1, r3, #23
 8006e82:	d50d      	bpl.n	8006ea0 <_scanf_i+0x180>
 8006e84:	42bd      	cmp	r5, r7
 8006e86:	d909      	bls.n	8006e9c <_scanf_i+0x17c>
 8006e88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e90:	4632      	mov	r2, r6
 8006e92:	4650      	mov	r0, sl
 8006e94:	4798      	blx	r3
 8006e96:	f105 39ff 	add.w	r9, r5, #4294967295
 8006e9a:	464d      	mov	r5, r9
 8006e9c:	42bd      	cmp	r5, r7
 8006e9e:	d028      	beq.n	8006ef2 <_scanf_i+0x1d2>
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	f012 0210 	ands.w	r2, r2, #16
 8006ea6:	d113      	bne.n	8006ed0 <_scanf_i+0x1b0>
 8006ea8:	702a      	strb	r2, [r5, #0]
 8006eaa:	6863      	ldr	r3, [r4, #4]
 8006eac:	9e01      	ldr	r6, [sp, #4]
 8006eae:	4639      	mov	r1, r7
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	47b0      	blx	r6
 8006eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb8:	6821      	ldr	r1, [r4, #0]
 8006eba:	1d1a      	adds	r2, r3, #4
 8006ebc:	f8c8 2000 	str.w	r2, [r8]
 8006ec0:	f011 0f20 	tst.w	r1, #32
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	d00f      	beq.n	8006ee8 <_scanf_i+0x1c8>
 8006ec8:	6018      	str	r0, [r3, #0]
 8006eca:	68e3      	ldr	r3, [r4, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60e3      	str	r3, [r4, #12]
 8006ed0:	6923      	ldr	r3, [r4, #16]
 8006ed2:	1bed      	subs	r5, r5, r7
 8006ed4:	445d      	add	r5, fp
 8006ed6:	442b      	add	r3, r5
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	2000      	movs	r0, #0
 8006edc:	b007      	add	sp, #28
 8006ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee2:	f04f 0b00 	mov.w	fp, #0
 8006ee6:	e7ca      	b.n	8006e7e <_scanf_i+0x15e>
 8006ee8:	07ca      	lsls	r2, r1, #31
 8006eea:	bf4c      	ite	mi
 8006eec:	8018      	strhmi	r0, [r3, #0]
 8006eee:	6018      	strpl	r0, [r3, #0]
 8006ef0:	e7eb      	b.n	8006eca <_scanf_i+0x1aa>
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	e7f2      	b.n	8006edc <_scanf_i+0x1bc>
 8006ef6:	bf00      	nop
 8006ef8:	08007458 	.word	0x08007458
 8006efc:	0800609d 	.word	0x0800609d
 8006f00:	08007101 	.word	0x08007101
 8006f04:	080075f8 	.word	0x080075f8

08006f08 <__sccl>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	780b      	ldrb	r3, [r1, #0]
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	2b5e      	cmp	r3, #94	@ 0x5e
 8006f10:	bf0b      	itete	eq
 8006f12:	784b      	ldrbeq	r3, [r1, #1]
 8006f14:	1c4a      	addne	r2, r1, #1
 8006f16:	1c8a      	addeq	r2, r1, #2
 8006f18:	2100      	movne	r1, #0
 8006f1a:	bf08      	it	eq
 8006f1c:	2101      	moveq	r1, #1
 8006f1e:	3801      	subs	r0, #1
 8006f20:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006f24:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006f28:	42a8      	cmp	r0, r5
 8006f2a:	d1fb      	bne.n	8006f24 <__sccl+0x1c>
 8006f2c:	b90b      	cbnz	r3, 8006f32 <__sccl+0x2a>
 8006f2e:	1e50      	subs	r0, r2, #1
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	f081 0101 	eor.w	r1, r1, #1
 8006f36:	54e1      	strb	r1, [r4, r3]
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f40:	2d2d      	cmp	r5, #45	@ 0x2d
 8006f42:	d005      	beq.n	8006f50 <__sccl+0x48>
 8006f44:	2d5d      	cmp	r5, #93	@ 0x5d
 8006f46:	d016      	beq.n	8006f76 <__sccl+0x6e>
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	d0f1      	beq.n	8006f30 <__sccl+0x28>
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	e7f2      	b.n	8006f36 <__sccl+0x2e>
 8006f50:	7846      	ldrb	r6, [r0, #1]
 8006f52:	2e5d      	cmp	r6, #93	@ 0x5d
 8006f54:	d0fa      	beq.n	8006f4c <__sccl+0x44>
 8006f56:	42b3      	cmp	r3, r6
 8006f58:	dcf8      	bgt.n	8006f4c <__sccl+0x44>
 8006f5a:	3002      	adds	r0, #2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	3201      	adds	r2, #1
 8006f60:	4296      	cmp	r6, r2
 8006f62:	54a1      	strb	r1, [r4, r2]
 8006f64:	dcfb      	bgt.n	8006f5e <__sccl+0x56>
 8006f66:	1af2      	subs	r2, r6, r3
 8006f68:	3a01      	subs	r2, #1
 8006f6a:	1c5d      	adds	r5, r3, #1
 8006f6c:	42b3      	cmp	r3, r6
 8006f6e:	bfa8      	it	ge
 8006f70:	2200      	movge	r2, #0
 8006f72:	18ab      	adds	r3, r5, r2
 8006f74:	e7e1      	b.n	8006f3a <__sccl+0x32>
 8006f76:	4610      	mov	r0, r2
 8006f78:	e7da      	b.n	8006f30 <__sccl+0x28>

08006f7a <__submore>:
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	460c      	mov	r4, r1
 8006f80:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f86:	4299      	cmp	r1, r3
 8006f88:	d11d      	bne.n	8006fc6 <__submore+0x4c>
 8006f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006f8e:	f7fe ff49 	bl	8005e24 <_malloc_r>
 8006f92:	b918      	cbnz	r0, 8006f9c <__submore+0x22>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fa0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006fa2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006fa6:	6360      	str	r0, [r4, #52]	@ 0x34
 8006fa8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006fac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006fb0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006fb4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006fb8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006fbc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006fc0:	6020      	str	r0, [r4, #0]
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e7e8      	b.n	8006f98 <__submore+0x1e>
 8006fc6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006fc8:	0077      	lsls	r7, r6, #1
 8006fca:	463a      	mov	r2, r7
 8006fcc:	f7fe ffbe 	bl	8005f4c <_realloc_r>
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d0de      	beq.n	8006f94 <__submore+0x1a>
 8006fd6:	eb00 0806 	add.w	r8, r0, r6
 8006fda:	4601      	mov	r1, r0
 8006fdc:	4632      	mov	r2, r6
 8006fde:	4640      	mov	r0, r8
 8006fe0:	f7ff f930 	bl	8006244 <memcpy>
 8006fe4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006fe8:	f8c4 8000 	str.w	r8, [r4]
 8006fec:	e7e9      	b.n	8006fc2 <__submore+0x48>

08006fee <memmove>:
 8006fee:	4288      	cmp	r0, r1
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	eb01 0402 	add.w	r4, r1, r2
 8006ff6:	d902      	bls.n	8006ffe <memmove+0x10>
 8006ff8:	4284      	cmp	r4, r0
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	d807      	bhi.n	800700e <memmove+0x20>
 8006ffe:	1e43      	subs	r3, r0, #1
 8007000:	42a1      	cmp	r1, r4
 8007002:	d008      	beq.n	8007016 <memmove+0x28>
 8007004:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007008:	f803 2f01 	strb.w	r2, [r3, #1]!
 800700c:	e7f8      	b.n	8007000 <memmove+0x12>
 800700e:	4402      	add	r2, r0
 8007010:	4601      	mov	r1, r0
 8007012:	428a      	cmp	r2, r1
 8007014:	d100      	bne.n	8007018 <memmove+0x2a>
 8007016:	bd10      	pop	{r4, pc}
 8007018:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800701c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007020:	e7f7      	b.n	8007012 <memmove+0x24>
	...

08007024 <_strtoul_l.isra.0>:
 8007024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007028:	4e34      	ldr	r6, [pc, #208]	@ (80070fc <_strtoul_l.isra.0+0xd8>)
 800702a:	4686      	mov	lr, r0
 800702c:	460d      	mov	r5, r1
 800702e:	4628      	mov	r0, r5
 8007030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007034:	5d37      	ldrb	r7, [r6, r4]
 8007036:	f017 0708 	ands.w	r7, r7, #8
 800703a:	d1f8      	bne.n	800702e <_strtoul_l.isra.0+0xa>
 800703c:	2c2d      	cmp	r4, #45	@ 0x2d
 800703e:	d110      	bne.n	8007062 <_strtoul_l.isra.0+0x3e>
 8007040:	782c      	ldrb	r4, [r5, #0]
 8007042:	2701      	movs	r7, #1
 8007044:	1c85      	adds	r5, r0, #2
 8007046:	f033 0010 	bics.w	r0, r3, #16
 800704a:	d115      	bne.n	8007078 <_strtoul_l.isra.0+0x54>
 800704c:	2c30      	cmp	r4, #48	@ 0x30
 800704e:	d10d      	bne.n	800706c <_strtoul_l.isra.0+0x48>
 8007050:	7828      	ldrb	r0, [r5, #0]
 8007052:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007056:	2858      	cmp	r0, #88	@ 0x58
 8007058:	d108      	bne.n	800706c <_strtoul_l.isra.0+0x48>
 800705a:	786c      	ldrb	r4, [r5, #1]
 800705c:	3502      	adds	r5, #2
 800705e:	2310      	movs	r3, #16
 8007060:	e00a      	b.n	8007078 <_strtoul_l.isra.0+0x54>
 8007062:	2c2b      	cmp	r4, #43	@ 0x2b
 8007064:	bf04      	itt	eq
 8007066:	782c      	ldrbeq	r4, [r5, #0]
 8007068:	1c85      	addeq	r5, r0, #2
 800706a:	e7ec      	b.n	8007046 <_strtoul_l.isra.0+0x22>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f6      	bne.n	800705e <_strtoul_l.isra.0+0x3a>
 8007070:	2c30      	cmp	r4, #48	@ 0x30
 8007072:	bf14      	ite	ne
 8007074:	230a      	movne	r3, #10
 8007076:	2308      	moveq	r3, #8
 8007078:	f04f 38ff 	mov.w	r8, #4294967295
 800707c:	2600      	movs	r6, #0
 800707e:	fbb8 f8f3 	udiv	r8, r8, r3
 8007082:	fb03 f908 	mul.w	r9, r3, r8
 8007086:	ea6f 0909 	mvn.w	r9, r9
 800708a:	4630      	mov	r0, r6
 800708c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007090:	f1bc 0f09 	cmp.w	ip, #9
 8007094:	d810      	bhi.n	80070b8 <_strtoul_l.isra.0+0x94>
 8007096:	4664      	mov	r4, ip
 8007098:	42a3      	cmp	r3, r4
 800709a:	dd1e      	ble.n	80070da <_strtoul_l.isra.0+0xb6>
 800709c:	f1b6 3fff 	cmp.w	r6, #4294967295
 80070a0:	d007      	beq.n	80070b2 <_strtoul_l.isra.0+0x8e>
 80070a2:	4580      	cmp	r8, r0
 80070a4:	d316      	bcc.n	80070d4 <_strtoul_l.isra.0+0xb0>
 80070a6:	d101      	bne.n	80070ac <_strtoul_l.isra.0+0x88>
 80070a8:	45a1      	cmp	r9, r4
 80070aa:	db13      	blt.n	80070d4 <_strtoul_l.isra.0+0xb0>
 80070ac:	fb00 4003 	mla	r0, r0, r3, r4
 80070b0:	2601      	movs	r6, #1
 80070b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070b6:	e7e9      	b.n	800708c <_strtoul_l.isra.0+0x68>
 80070b8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80070bc:	f1bc 0f19 	cmp.w	ip, #25
 80070c0:	d801      	bhi.n	80070c6 <_strtoul_l.isra.0+0xa2>
 80070c2:	3c37      	subs	r4, #55	@ 0x37
 80070c4:	e7e8      	b.n	8007098 <_strtoul_l.isra.0+0x74>
 80070c6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80070ca:	f1bc 0f19 	cmp.w	ip, #25
 80070ce:	d804      	bhi.n	80070da <_strtoul_l.isra.0+0xb6>
 80070d0:	3c57      	subs	r4, #87	@ 0x57
 80070d2:	e7e1      	b.n	8007098 <_strtoul_l.isra.0+0x74>
 80070d4:	f04f 36ff 	mov.w	r6, #4294967295
 80070d8:	e7eb      	b.n	80070b2 <_strtoul_l.isra.0+0x8e>
 80070da:	1c73      	adds	r3, r6, #1
 80070dc:	d106      	bne.n	80070ec <_strtoul_l.isra.0+0xc8>
 80070de:	2322      	movs	r3, #34	@ 0x22
 80070e0:	f8ce 3000 	str.w	r3, [lr]
 80070e4:	4630      	mov	r0, r6
 80070e6:	b932      	cbnz	r2, 80070f6 <_strtoul_l.isra.0+0xd2>
 80070e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ec:	b107      	cbz	r7, 80070f0 <_strtoul_l.isra.0+0xcc>
 80070ee:	4240      	negs	r0, r0
 80070f0:	2a00      	cmp	r2, #0
 80070f2:	d0f9      	beq.n	80070e8 <_strtoul_l.isra.0+0xc4>
 80070f4:	b106      	cbz	r6, 80070f8 <_strtoul_l.isra.0+0xd4>
 80070f6:	1e69      	subs	r1, r5, #1
 80070f8:	6011      	str	r1, [r2, #0]
 80070fa:	e7f5      	b.n	80070e8 <_strtoul_l.isra.0+0xc4>
 80070fc:	080074b5 	.word	0x080074b5

08007100 <_strtoul_r>:
 8007100:	f7ff bf90 	b.w	8007024 <_strtoul_l.isra.0>

08007104 <_init>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	bf00      	nop
 8007108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710a:	bc08      	pop	{r3}
 800710c:	469e      	mov	lr, r3
 800710e:	4770      	bx	lr

08007110 <_fini>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	bf00      	nop
 8007114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007116:	bc08      	pop	{r3}
 8007118:	469e      	mov	lr, r3
 800711a:	4770      	bx	lr
